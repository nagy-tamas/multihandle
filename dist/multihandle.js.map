{"version":3,"sources":["../src/multihandle.js"],"names":[],"mappings":"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","file":"multihandle.js","sourcesContent":["((window) => {\r\n  /**\r\n   * Round number to step\r\n   * @param  float value\r\n   * @param  float step\r\n   * @return float\r\n   */\r\n  function round(value, step) {\r\n    step || (step = 1.0);\r\n    const inv = 1.0 / step;\r\n    return Math.round(value * inv) / inv;\r\n  }\r\n\r\n  class MultiHandle {\r\n    /**\r\n     * Creates the component\r\n     *\r\n     * You can set the options explicitly through the options array, or\r\n     * you can use data-* attributes as well.\r\n     *\r\n     * @param  DOMNode el       Reference of the DOM element\r\n     * @param  Object options\r\n     * @return undefined\r\n     */\r\n    constructor(el, options = {}) {\r\n      this.el = el;\r\n\r\n      // removing the \"loading\" state - show component\r\n      this.el.className = el.className.replace(/multihandle--loading/g, '');\r\n\r\n      // default options\r\n      this.options = Object.assign({\r\n        min: 0,\r\n        max: 100,\r\n        step: 1,\r\n        tpl: {\r\n          track: '${handlers}',          // must have a single root element!\r\n          handler: '${value}'            // must have a single root element!\r\n        }\r\n      }, this.el.dataset, options);\r\n\r\n      // normalize values\r\n      this.options.min = parseFloat(this.options.min, 10);\r\n      this.options.max = parseFloat(this.options.max, 10);\r\n      this.options.step = parseFloat(this.options.step, 10);\r\n\r\n      // are we dragging something?\r\n      this.dragging = false;\r\n\r\n      // reference to the original handlers, converted to an array\r\n      this.handlers = Array.prototype.slice.call(this.el.querySelectorAll('input[type=range]'));\r\n      this.handlerEls = [];\r\n\r\n      // creating the component\r\n      this.buildDOM();\r\n      this.updateHandlers();\r\n\r\n      // binding events to the component\r\n      this.bindEvents();\r\n    }\r\n\r\n    /**\r\n     * Creates the DOM string of the handlers we can inject in the HTML.\r\n     *\r\n     * @return string The handlers\r\n     */\r\n    createHandlers() {\r\n      const self = this;\r\n      return this.handlers.reduce((previous, current) => (\r\n        `${previous}<div class=\"multihandle__handle\" data-for=\"${current.name}\">\r\n          ${self.options.tpl.handler}\r\n        </div>`), ''\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Finding the handlers in the container node.\r\n     *\r\n     * @param  DOMNode container\r\n     * @return undefined\r\n     */\r\n    findHandlers(container) {\r\n      const self = this;\r\n      container.querySelectorAll('.multihandle__handle').forEach((el) => {\r\n        el.inputReference = self.el.querySelector(`input[name=${el.dataset.for}]`);\r\n        self.handlerEls.push(el);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Update the handlers to reflect the inputs' state\r\n     *\r\n     * @return undefined\r\n     */\r\n    updateHandlers() {\r\n      const self = this;\r\n      self.handlerEls.forEach((el) => {\r\n        // console.log(self.valueToPercent(parseFloat(el.inputReference.value, 10));\r\n        const value = parseFloat(el.inputReference.value, 10);\r\n        const percent = self.valueToPercent(value);\r\n        el.style.left = `${percent}%`;\r\n        el.innerHTML = el.innerHTML.replace(/\\${value}/, value);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Update the values of the input fields\r\n     *\r\n     * @return undefined\r\n     */\r\n    updateInputs() {\r\n      const self = this;\r\n\r\n      this.handlerEls.forEach((handler) => {\r\n        const input = handler.inputReference;\r\n        input.value = self.percentToValue(parseFloat(handler.style.left, 10));\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Transforms an input value with a min/max threshold to a percent value\r\n     *\r\n     * @param  float val\r\n     * @return float percentage\r\n     */\r\n    valueToPercent(val) {\r\n      const scale = this.options.max - this.options.min;\r\n      return (100 / scale) * (val - this.options.min);\r\n    }\r\n\r\n    /**\r\n     * Comes handy when the user drags the element, and all we have is the left coordinate\r\n     *\r\n     * @param  float px\r\n     * @return float percent\r\n     */\r\n    pxToPercent(px) {\r\n      const full = this.el.scrollWidth;\r\n      return (px / full) * 100;\r\n    }\r\n\r\n    /**\r\n     * Gives back the value based on the current handler position\r\n     *\r\n     * @param  float percent\r\n     * @return float value\r\n     */\r\n    percentToValue(percent) {\r\n      const scale = this.options.max - this.options.min;\r\n      // before rounding to options.step\r\n      const rawValue = (percent / (100 / scale)) + this.options.min;\r\n      const rounded = round(rawValue, this.options.step);\r\n\r\n      return rounded;\r\n    }\r\n\r\n    /**\r\n     * Creating the range track and the handlers\r\n     *\r\n     * @return undefined\r\n     */\r\n    buildDOM() {\r\n      // creating the track element\r\n      const track = document.createElement('div');\r\n      track.className = 'multihandle__track';\r\n      track.innerHTML = this.options.tpl.track;\r\n      this.el.appendChild(track);\r\n\r\n      // putting the handlers on the track\r\n      track.innerHTML = track.innerHTML.replace(/\\${handlers}/, this.createHandlers());\r\n      this.findHandlers(track);\r\n\r\n      // putting the whole component in the container\r\n      this.el.appendChild(track);\r\n    }\r\n\r\n    /**\r\n     * Adding eventlisteners\r\n     *\r\n     * @return undefined\r\n     */\r\n    bindEvents() {\r\n      this.el.addEventListener('mousedown', evt => this.onMouseDown(evt));\r\n      document.body.addEventListener('mouseup', evt => this.onMouseUp(evt));\r\n      document.body.addEventListener('mousemove', evt => this.onMouseMove(evt));\r\n      document.body.addEventListener('dragstart', () => (false));\r\n    }\r\n\r\n    /**\r\n     * We may start dragging one of the handlers\r\n     *\r\n     * @param  Event evt\r\n     * @return undefined\r\n     */\r\n    onMouseDown(evt) {\r\n      const found = this.handlerEls.indexOf(evt.target);\r\n      // click triggered on the track, not on one of the handlers\r\n      if (found < 0) {\r\n        return;\r\n      }\r\n\r\n      this.dragging = {\r\n        handlerIx: found,\r\n        handler: this.handlerEls[found],\r\n        startLeft: this.handlerEls[found].offsetLeft,\r\n        startX: evt.clientX\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Dragging stopped\r\n     *\r\n     * @return undefined\r\n     */\r\n    onMouseUp() {\r\n      this.dragging = false;\r\n    }\r\n\r\n    normalizePercent(percent) {\r\n      percent = Math.max(0, percent);\r\n      percent = Math.min(100, percent);\r\n\r\n      return percent;\r\n    }\r\n\r\n    /**\r\n     * Moving one of the handlers, if it's in dragging state\r\n     *\r\n     * @param  Event evt\r\n     * @return undefined\r\n     */\r\n    onMouseMove(evt) {\r\n      if (this.dragging && this.dragging.handlerIx > -1) {\r\n        const newLeft = this.dragging.startLeft - (this.dragging.startX - evt.clientX);\r\n        const percent = this.normalizePercent(this.pxToPercent(newLeft));\r\n        const value = this.percentToValue(percent);\r\n\r\n        this.dragging.handler.style.left = `${percent}%`;\r\n        this.dragging.handler.innerHTML = this.options.tpl.handler.replace(/\\${value}/, value);\r\n        this.updateInputs();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create multihandler components of the given array of DOMNodes\r\n   *\r\n   * @param  Array els    Node list of DOM elements\r\n   * @return undefined\r\n   */\r\n  const init = (els) => {\r\n    els.forEach((el) => {\r\n      return new MultiHandle(el);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Exported API in the window namespace\r\n   */\r\n  window.multihandle = {\r\n    init\r\n  };\r\n})(window);\r\n"]}