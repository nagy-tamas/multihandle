{"version":3,"sources":["../src/multihandle.js"],"names":[],"mappings":"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","file":"multihandle.js","sourcesContent":["((window) => {\r\n  /**\r\n   * Round number to step\r\n   * @param  float value\r\n   * @param  float step\r\n   * @return float\r\n   */\r\n  function round(value, step) {\r\n    step || (step = 1.0);\r\n    const inv = 1.0 / step;\r\n    return Math.round(value * inv) / inv;\r\n  }\r\n\r\n  /**\r\n   * Trims down the unnecessary decimals\r\n   *\r\n   * @param      {number}  value   The value\r\n   * @param      {<type>}  places  The places\r\n   * @return     {<type>}  { description_of_the_return_value }\r\n   */\r\n  function roundToDecimalPlaces(value, places) {\r\n    const div = Math.pow(10, places);\r\n    return Math.round(value * div) / div;\r\n  }\r\n\r\n  /**\r\n   * Because safari needs it for the Object.assign\r\n   *\r\n   * @param      DOMStringMap map\r\n   */\r\n  function domStringMapToObj(map) {\r\n    const obj = {};\r\n    Object.keys(map).forEach((key) => {\r\n      obj[key] = map[key];\r\n    });\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * utility method that returns the normalized clintX property of an event\r\n   *\r\n   * @param Event evt\r\n   * @return Float\r\n   */\r\n  function getClientX(evt) {\r\n    if (typeof evt.clientX !== 'undefined') {\r\n      return evt.clientX;\r\n    }\r\n\r\n    if (evt.touches[0]) {\r\n      return evt.touches[0].clientX;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * utility function to create events\r\n   *\r\n   * @param String type\r\n   * @return Event\r\n   */\r\n  function newEvent(type, options) {\r\n    const evt = document.createEvent('HTMLEvents');\r\n    if (typeof Event === 'function') {\r\n      options = options || {\r\n        view: window,\r\n        bubbles: true,\r\n        cancelable: true\r\n      };\r\n      return new Event(type, options);\r\n    }\r\n    evt.initEvent(type, true, true);\r\n    return evt;\r\n  }\r\n\r\n  class MultiHandle {\r\n    /**\r\n     * Creates the component\r\n     *\r\n     * You can set the options explicitly through the options array, or\r\n     * you can use data-* attributes as well.\r\n     *\r\n     * @param  DOMNode el       Reference of the DOM element\r\n     * @param  Object options\r\n     * @return undefined\r\n     */\r\n    constructor(el, options = {}) {\r\n      this.el = el;\r\n\r\n      // removing the \"loading\" state - show component\r\n      this.el.className = el.className.replace(/multihandle--loading/g, '');\r\n\r\n      this.options = this.parseOptions(options);\r\n\r\n      // for non-linear, or value/label scales\r\n      this.dataset = null;\r\n\r\n      // are we dragging something?\r\n      this.dragging = false;\r\n\r\n      // the component will be generated here\r\n      this.container = this.el.querySelector('.multihandle__component');\r\n      if (!this.container) {\r\n        this.container = this.el;\r\n      }\r\n\r\n      // reference to the original handlers, converted to an array\r\n      this.handlers = [];\r\n      this.handlerEls = [];\r\n      this.lines = [];\r\n\r\n      // creating the component\r\n      this.buildComponent();\r\n      this.syncHandlersToInputs();\r\n      this.syncLinesBetweenHandlers();\r\n\r\n      // binding events to the component\r\n      this.bindEvents();\r\n    }\r\n\r\n    /**\r\n     * Creates the this.options, based on the default and the given values\r\n     *\r\n     * Plus normalizes some flags/variables\r\n     *\r\n     * @param      Object    options   The option argument of the constructor\r\n     * @return     Object    The merged, final option object\r\n     */\r\n    parseOptions(options) {\r\n      // default options\r\n      const opts = Object.assign({\r\n        min: 0,\r\n        max: 100,\r\n        step: 0.5,\r\n        decimalsAccuracy: 2,\r\n        gfx: '',\r\n        tpl: {\r\n          track: '${handlers}',\r\n          handler: '${value}',\r\n          snappingpoint: '${value}'\r\n        }\r\n      }, domStringMapToObj(this.el.dataset), options);\r\n\r\n      opts.gfx = opts.gfx.split(',');\r\n\r\n      opts.dataset = !!opts.dataset;\r\n\r\n      if (opts.dataset) {\r\n        opts.min = 0;\r\n        opts.step = 1;\r\n      }\r\n\r\n      if (typeof opts.step === 'string') {\r\n        opts.step = parseFloat(opts.step, 10);\r\n      }\r\n\r\n      opts.incLittle = typeof opts.incLittle === 'undefined' ?\r\n        opts.step : opts.incLittle;\r\n\r\n      opts.incBig = typeof opts.incBig === 'undefined' ?\r\n        opts.step * 10 : opts.incBig;\r\n\r\n      // normalize values\r\n      opts.min = parseFloat(opts.min, 10);\r\n      opts.max = parseFloat(opts.max, 10);\r\n      opts.step = parseFloat(opts.step, 10);\r\n\r\n      console.log(opts);\r\n      return opts;\r\n    }\r\n\r\n    /**\r\n     * Creates the DOM string of the handlers we can inject in the HTML.\r\n     *\r\n     * @return string The handlers\r\n     */\r\n    createHandlers() {\r\n      const self = this;\r\n      return this.handlers.reduce((previous, current) => (\r\n        `${previous}<a href=\"javascript:void(0)\" class=\"multihandle__handle\">\r\n          ${self.options.tpl.handler}\r\n        </a>`), ''\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Creates a dataset from the given select tag\r\n     *\r\n     * @param    DOMNode  select\r\n     * @return   Array\r\n     */\r\n    createDataset(select) {\r\n      const dataset = [];\r\n      for (let ix = 0; ix <= select.options.length - 1; ix++) {\r\n        dataset.push({\r\n          value: select.options[ix].value,\r\n          label: select.options[ix].text\r\n        });\r\n      }\r\n\r\n      return dataset;\r\n    }\r\n\r\n    /**\r\n     * Find the native input elements in the component\r\n     */\r\n    findInputs() {\r\n      if (this.options.dataset) {\r\n        this.handlers = Array.prototype.slice.call(this.el.querySelectorAll('select'));\r\n        this.dataset = this.createDataset(this.handlers[0]);\r\n        this.options.max = this.handlers[0].options.length - 1;\r\n      } else {\r\n        this.handlers = Array.prototype.slice.call(this.el.querySelectorAll('input'));\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Finding the handlers in the container node.\r\n     *\r\n     * @param  DOMNode container\r\n     * @return undefined\r\n     */\r\n    findHandlers(track) {\r\n      const self = this;\r\n      Array.prototype.forEach.call(track.querySelectorAll('.multihandle__handle'), (el, ix) => {\r\n        el.inputReference = this.handlers[ix];\r\n        self.handlerEls.push(el);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Creating lines between the handlers\r\n     *\r\n     * @return string The lines\r\n     */\r\n    createLines(track) {\r\n      if (this.handlerEls.length < 2) {\r\n        return;\r\n      }\r\n\r\n      // let's create a between the current handler, and the next one\r\n      for (let i = 0; i < this.handlerEls.length - 1; i++) {\r\n        const line = document.createElement('span');\r\n        line.className = `multihandle__line multihandle__line--${i}`;\r\n        line.lineFrom = this.handlerEls[i];\r\n        line.lineTo = this.handlerEls[i + 1];\r\n\r\n        this.lines.push(line);\r\n        track.appendChild(line);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Creates visible, styleable snapping points\r\n     *\r\n     * @return undefined\r\n     */\r\n    createSnappingPoints(track) {\r\n      const snaps = document.createElement('div');\r\n      snaps.className = 'multihandle__snappingpoints';\r\n      track.appendChild(snaps);\r\n\r\n      this.snappingMap.forEach((data, ix) => {\r\n        const snap = document.createElement('span');\r\n        snap.className = 'multihandle__snappingpoint';\r\n        snaps.appendChild(snap);\r\n        snap.innerHTML = this.options.tpl.snappingpoint.replace(/\\${value}/, data[0]);\r\n        snap.style.left = `${data[1]}%`;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Creates a snapping map.\r\n     *\r\n     * @return array\r\n     */\r\n    createSnappingMap() {\r\n      const valLength = Math.abs(this.options.max - this.options.min);\r\n      const steps = valLength / this.options.step;\r\n      const snaps = [];\r\n\r\n      for (let ix = 0; ix <= steps; ix++) {\r\n        // avoiding floating point math \"bugs\"\r\n        const currVal = roundToDecimalPlaces(ix * this.options.step, 6);\r\n        // first number: value, second: percent (for display purposes)\r\n        snaps.push([this.options.min + currVal,\r\n          roundToDecimalPlaces((currVal / valLength) * 100, 2)]);\r\n      }\r\n\r\n      return snaps;\r\n    }\r\n\r\n    /**\r\n     * Is snapping enabled or not?\r\n     *\r\n     * @return boolean\r\n     */\r\n    isItSnaps() {\r\n      return this.options.step !== 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the handler left position to the given percent value\r\n     *\r\n     * @param Object handler\r\n     * @param Float percent\r\n     */\r\n    setHandlerPos(handler, percent) {\r\n      const value = this.percentToValue(percent);\r\n      handler.style.left = `${percent}%`;\r\n      handler.innerHTML = this.options.tpl.handler.replace(/\\${value}/, value);\r\n      this.syncLinesBetweenHandlers();\r\n    }\r\n\r\n    /**\r\n     * Creating the range track and the handlers\r\n     *\r\n     * @return undefined\r\n     */\r\n    buildComponent() {\r\n      // creating the track element\r\n      const track = document.createElement('div');\r\n      track.className = 'multihandle__track';\r\n      this.container.appendChild(track);\r\n\r\n      // putting the handlers on the track\r\n      this.findInputs();\r\n      track.innerHTML = this.options.tpl.track.replace(/\\${handlers}/, this.createHandlers());\r\n      this.findHandlers(track);\r\n\r\n      this.createLines(track);\r\n\r\n      if (this.isItSnaps()) {\r\n        this.snappingMap = this.createSnappingMap();\r\n\r\n        if (this.options.gfx.indexOf('snappingpoints') > -1) {\r\n          this.createSnappingPoints(track);\r\n        }\r\n      }\r\n\r\n      // putting the whole component in the container\r\n      this.container.appendChild(track);\r\n    }\r\n\r\n    /**\r\n     * Adding eventlisteners\r\n     *\r\n     * @return undefined\r\n     */\r\n    bindEvents() {\r\n      this.container.addEventListener('mousedown', evt => this.onMouseDown(evt));\r\n      this.container.addEventListener('touchstart', evt => this.onMouseDown(evt));\r\n      document.body.addEventListener('mouseup', evt => this.onMouseUp(evt));\r\n      document.body.addEventListener('touchend', evt => this.onMouseUp(evt));\r\n      document.body.addEventListener('touchcancel', evt => this.onMouseUp(evt));\r\n      document.body.addEventListener('mousemove', evt => this.onMouseMove(evt));\r\n      document.body.addEventListener('touchmove', evt => this.onMouseMove(evt));\r\n\r\n      this.handlerEls.forEach((handle) => {\r\n        handle.addEventListener('keydown', evt => this.onHandlerKeyDown(evt));\r\n        // stops link dragging - won't work with addEventListener!\r\n        handle.ondragstart = evt => (false);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * We may start dragging one of the handlers\r\n     *\r\n     * @param  Event evt\r\n     * @return undefined\r\n     */\r\n    onMouseDown(evt) {\r\n      const found = this.handlerEls.indexOf(evt.target);\r\n      // click triggered on the track, not on one of the handlers\r\n      if (found < 0) {\r\n        return;\r\n      }\r\n\r\n      this.dragging = {\r\n        handlerIx: found,\r\n        handler: this.handlerEls[found],\r\n        startLeft: this.handlerEls[found].offsetLeft,\r\n        startX: getClientX(evt)\r\n      };\r\n\r\n      this.dragging.handler.classList.add('multihandle__handle--active');\r\n      document.body.classList.add('multihandle-disable-drag');\r\n    }\r\n\r\n    /**\r\n     * Dragging stopped\r\n     *\r\n     * @return undefined\r\n     */\r\n    onMouseUp(evt) {\r\n      if (this.dragging) {\r\n        this.dragging.handler.classList.remove('multihandle__handle--active');\r\n      }\r\n\r\n      this.dragging = false;\r\n      document.body.classList.remove('multihandle-disable-drag');\r\n    }\r\n\r\n    /**\r\n     * Moving one of the handlers, if it's in dragging state\r\n     *\r\n     * @param  Event evt\r\n     * @return undefined\r\n     */\r\n    onMouseMove(evt) {\r\n      if (this.dragging && this.dragging.handlerIx > -1) {\r\n        const newLeftPx = this.dragging.startLeft - (this.dragging.startX - getClientX(evt));\r\n        const percent = this.normalizePercent(this.pixelToPercent(newLeftPx));\r\n\r\n        if (this.dataset) {\r\n          this.setDatasetAsPercent(this.dragging.handler, percent);\r\n        } else {\r\n          this.setValueAsPercent(this.dragging.handler, percent);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Sets a handler's value\r\n     *\r\n     * @param Object handler\r\n     * @param Float value\r\n     * @return\r\n     *\r\n     */\r\n    setHandlerValue(handler, value) {\r\n      value = this.normalizeValue(value);\r\n      const percent = this.valueToPercent(value);\r\n      handler.inputReference.value = value;\r\n      handler.inputReference.dispatchEvent(newEvent('input'));\r\n      this.setHandlerPos(handler, percent);\r\n    }\r\n\r\n    /**\r\n     * Sets a handler's value as percent plus updates the related input\r\n     *\r\n     * Object handler\r\n     * Float percent\r\n     */\r\n    setValueAsPercent(handler, percent) {\r\n      const value = this.percentToValue(percent);\r\n      this.setHandlerValue(handler, value);\r\n    }\r\n\r\n    /**\r\n     * Find a value in the dataset by a percent instead of an index.\r\n     *\r\n     * @param      {<type>}  handler  The handler\r\n     * @param      {<type>}  percent  The percent\r\n     */\r\n    setDatasetAsPercent(handler, percent) {\r\n      const ix = this.percentToValue(percent);\r\n      const data = this.dataset[ix];\r\n      this.setHandlerValue(handler, data.value);\r\n      console.log(data);\r\n    }\r\n\r\n    /**\r\n     * Handling the keystrokes\r\n     *\r\n     * @param      Event  evt\r\n     */\r\n    onHandlerKeyDown(evt) {\r\n      switch (evt.keyCode) {\r\n        case 38: // up\r\n          this.incByBig(evt.target);\r\n          evt.preventDefault();\r\n          break;\r\n        case 40: // down\r\n          this.descByBig(evt.target);\r\n          evt.preventDefault();\r\n          break;\r\n        case 39: // right\r\n          this.incByLittle(evt.target);\r\n          evt.preventDefault();\r\n          break;\r\n        case 37: // left\r\n          this.descByLittle(evt.target);\r\n          evt.preventDefault();\r\n          break;\r\n        default:\r\n      }\r\n    }\r\n\r\n    incByLittle(handler) {\r\n      this.setHandlerValue(\r\n        handler,\r\n        parseFloat(handler.inputReference.value, 10) + this.options.incLittle\r\n      );\r\n    }\r\n\r\n    descByLittle(handler) {\r\n      this.setHandlerValue(\r\n        handler,\r\n        parseFloat(handler.inputReference.value, 10) - this.options.incLittle\r\n      );\r\n    }\r\n\r\n    incByBig(handler) {\r\n      this.setHandlerValue(\r\n        handler,\r\n        parseFloat(handler.inputReference.value, 10) + this.options.incBig\r\n      );\r\n    }\r\n\r\n    descByBig(handler) {\r\n      this.setHandlerValue(\r\n        handler,\r\n        parseFloat(handler.inputReference.value, 10) - this.options.incBig\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Update the handlers to reflect the inputs' state\r\n     *\r\n     * @return undefined\r\n     */\r\n    syncHandlersToInputs() {\r\n      const self = this;\r\n      self.handlerEls.forEach((el) => {\r\n        const value = parseFloat(el.inputReference.value, 10);\r\n        const percent = self.valueToPercent(value);\r\n        el.style.left = `${percent}%`;\r\n        el.innerHTML = el.innerHTML.replace(/\\${value}/, value);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Update the values of the input fields\r\n     *\r\n     * @return undefined\r\n     */\r\n    syncInputsToHandlers() {\r\n      const self = this;\r\n\r\n      this.handlerEls.forEach((handler) => {\r\n        const input = handler.inputReference;\r\n        input.value = self.percentToValue(parseFloat(handler.style.left, 10));\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Updating the lines between the handlers for proper sizing\r\n     *\r\n     * @return undefined\r\n     */\r\n    syncLinesBetweenHandlers() {\r\n      if (this.handlerEls.length < 2) {\r\n        return;\r\n      }\r\n\r\n      this.lines.forEach((line) => {\r\n        const handler1 = parseFloat(line.lineTo.style.left, 10);\r\n        const handler2 = parseFloat(line.lineFrom.style.left, 10);\r\n        const left = Math.min(handler1, handler2);\r\n        const width = Math.abs(handler1 - handler2);\r\n\r\n        line.style.left = `${left}%`;\r\n        line.style.width = `${width}%`;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Transforms an input value with a min/max threshold to a percent value\r\n     *\r\n     * @param  float val\r\n     * @return float percentage\r\n     */\r\n    valueToPercent(val) {\r\n      const scale = this.options.max - this.options.min;\r\n      return (100 / scale) * (val - this.options.min);\r\n    }\r\n\r\n    /**\r\n     * Comes handy when the user drags the element, and all we have is the left coordinate\r\n     *\r\n     * @param  float px\r\n     * @return float percent\r\n     */\r\n    pixelToPercent(px) {\r\n      const full = this.container.scrollWidth;\r\n      return (px / full) * 100;\r\n    }\r\n\r\n    percentToIndex(percent) {\r\n      const scale = this.options.max - this.options.min;\r\n      // before rounding to options.step\r\n      const rawValue = (percent / (100 / scale));\r\n      return rawValue;\r\n    }\r\n\r\n    /**\r\n     * Gives back the value based on the current handler position\r\n     *\r\n     * @param  float percent\r\n     * @return float value\r\n     */\r\n    percentToValue(percent) {\r\n      const scale = this.options.max - this.options.min;\r\n      // before rounding to options.step\r\n      const rawValue = this.percentToIndex() + this.options.min;\r\n      const rounded = round(rawValue, this.options.step);\r\n\r\n      return rounded;\r\n    }\r\n\r\n    /**\r\n     * Squeezes the percent value between 0 and 100\r\n     *\r\n     * @param Float percent\r\n     */\r\n    normalizePercent(percent) {\r\n      // limit the percentage between 0 and 100\r\n      percent = Math.max(0, percent);\r\n      percent = Math.min(100, percent);\r\n\r\n      // converts percent to value, keeping mind the min/max value limits\r\n      // then convert it back to percent\r\n      return this.valueToPercent(this.percentToValue(percent));\r\n    }\r\n\r\n    /**\r\n     * Squeezes the value between the min and max limits\r\n     *\r\n     * @param Float value\r\n     */\r\n    normalizeValue(value) {\r\n      // limit the percentage between 0 and 100\r\n      value = Math.max(this.options.min, value);\r\n      value = Math.min(this.options.max, value);\r\n      value = roundToDecimalPlaces(value, this.options.decimalsAccuracy);\r\n      return value;\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Create multihandler components from the given array of DOMNodes\r\n   *\r\n   * @param  Array els    Node list of DOM elements\r\n   * @return undefined\r\n   */\r\n  const init = (els) => {\r\n    // querySelectorAll -> Array\r\n    if (els instanceof NodeList) {\r\n      els = Array.prototype.slice.call(els);\r\n    }\r\n\r\n    // single element -> [element]  (so we can forEach it)\r\n    if (!(els instanceof Array)) {\r\n      els = [els];\r\n    }\r\n\r\n    els.forEach((el) => {\r\n      return new MultiHandle(el);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Exported API in the window namespace\r\n   */\r\n  window.multihandle = MultiHandle;\r\n  window.multihandle = {\r\n    init\r\n  };\r\n})(window);\r\n"]}