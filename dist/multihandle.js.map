{"version":3,"sources":["../src/multihandle.js"],"names":[],"mappings":";;;;;;AAAA,CAAC,UAAC,MAAD,EAAY;AACX;;;;;;;AAOA,WAAS,KAAT,CAAe,KAAf,EAAsB,IAAtB,EAA4B;AAC1B,aAAS,OAAO,GAAhB;AACA,QAAM,MAAM,MAAM,IAAlB;AACA,WAAO,KAAK,KAAL,CAAW,QAAQ,GAAnB,IAA0B,GAAjC;AACD;;AAED;;;;;;;AAOA,WAAS,oBAAT,CAA8B,KAA9B,EAAqC,MAArC,EAA6C;AAC3C,QAAM,MAAM,KAAK,GAAL,CAAS,EAAT,EAAa,MAAb,CAAZ;AACA,WAAO,KAAK,KAAL,CAAW,QAAQ,GAAnB,IAA0B,GAAjC;AACD;;AAED;;;;;;AAMA,WAAS,iBAAT,CAA2B,GAA3B,EAAgC;AAC9B,QAAM,MAAM,EAAZ;AACA,WAAO,IAAP,CAAY,GAAZ,EAAiB,OAAjB,CAAyB,UAAC,GAAD,EAAS;AAChC,UAAI,GAAJ,IAAW,IAAI,GAAJ,CAAX;AACD,KAFD;AAGA,WAAO,GAAP;AACD;;AAED;;;;;;;;AAQA,WAAS,UAAT,CAAoB,GAApB,EAAyB;AACvB,QAAI,OAAO,IAAI,OAAX,KAAuB,WAA3B,EAAwC;AACtC,aAAO,IAAI,OAAX;AACD;;AAED,QAAI,IAAI,OAAJ,CAAY,CAAZ,CAAJ,EAAoB;AAClB,aAAO,IAAI,OAAJ,CAAY,CAAZ,EAAe,OAAtB;AACD;;AAED,WAAO,SAAP;AACD;;AAED;;;;;;AAMA,WAAS,SAAT,CAAmB,EAAnB,EAAuB;AACrB,QAAM,OAAO,GAAG,qBAAH,EAAb;;AAEA,WAAO;AACL,WAAK,KAAK,GAAL,GAAW,SAAS,IAAT,CAAc,SADzB;AAEL,YAAM,KAAK,IAAL,GAAY,SAAS,IAAT,CAAc;AAF3B,KAAP;AAID;;AAGD;;;;;;AAMA,WAAS,QAAT,CAAkB,SAAlB,EAA6B,OAA7B,EAAsC;AACpC,QAAM,MAAM,SAAS,WAAT,CAAqB,YAArB,CAAZ;AACA,QAAI,OAAO,KAAP,KAAiB,UAArB,EAAiC;AAC/B,gBAAU,WAAW;AACnB,cAAM,MADa;AAEnB,iBAAS,IAFU;AAGnB,oBAAY;AAHO,OAArB;AAKA,aAAO,IAAI,KAAJ,CAAU,SAAV,EAAqB,OAArB,CAAP;AACD;;AAED,QAAI,SAAJ,CAAc,SAAd,EAAyB,IAAzB,EAA+B,IAA/B;AACA,WAAO,GAAP;AACD;;AAED;;;;;;;;;AASA,WAAS,OAAT,CAAiB,EAAjB,EAAqB,QAArB,EAA+B;AAC7B,QAAM,kBAAkB,GAAG,OAAH,IAAc,GAAG,qBAAjB,IACtB,GAAG,kBADmB,IACG,GAAG,iBAD9B;;AAGA,WAAO,EAAP,EAAW;AACT,UAAI,gBAAgB,IAAhB,CAAqB,EAArB,EAAyB,QAAzB,CAAJ,EAAwC;AACtC;AACD;AACD,WAAK,GAAG,aAAR;AACD;AACD,WAAO,EAAP;AACD;;AAED;;;;;;;AAOA,WAAS,aAAT,CAAuB,MAAvB,EAA+B,KAA/B,EAAsC;AACpC,QAAI,UAAU,KAAd;;AAEA,WAAO,OAAP,EAAgB;AACd,UAAI,YAAY,MAAhB,EAAwB;AACtB;AACD;AACD,gBAAU,QAAQ,UAAlB;AACD;AACD,WAAO,YAAY,MAAnB;AACD;;AAxIU,MA0IL,WA1IK;AA2IT;;;;;;;;;;AAUA,yBAAY,EAAZ,EAA8B;AAAA,UAAd,OAAc,yDAAJ,EAAI;;AAAA;;AAC5B,WAAK,EAAL,GAAU,EAAV;;AAEA;AACA;AACA;AACA,WAAK,EAAL,CAAQ,SAAR,GAAoB,GAAG,SAAH,CAAa,OAAb,CAAqB,uBAArB,EAA8C,EAA9C,CAApB;;AAEA,WAAK,OAAL,GAAe,KAAK,YAAL,CAAkB,OAAlB,CAAf;;AAEA;AACA,WAAK,OAAL,GAAe,IAAf;;AAEA;AACA;AACA;AACA,WAAK,QAAL,GAAgB,KAAhB;;AAEA;AACA,WAAK,SAAL,GAAiB,KAAK,EAAL,CAAQ,aAAR,CAAsB,yBAAtB,CAAjB;AACA,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,aAAK,SAAL,GAAiB,KAAK,EAAtB;AACD;;AAED;AACA,WAAK,MAAL,GAAc,EAAd;;AAEA;AACA,WAAK,QAAL,GAAgB,EAAhB;;AAEA;AACA,WAAK,SAAL,GAAiB,EAAjB;;AAEA;AACA,WAAK,cAAL;;AAEA;AACA,WAAK,oBAAL;;AAEA;AACA,WAAK,4BAAL;;AAEA;AACA,WAAK,UAAL;AACD;;AAED;;;;;;;;;;AAnMS;AAAA;AAAA,mCA2MI,OA3MJ,EA2Ma;AACpB;AACA,YAAM,OAAO,OAAO,MAAP,CAAc;AACzB,eAAK,CADoB;AAEzB,eAAK,GAFoB;AAGzB,gBAAM,GAHmB;AAIzB,4BAAkB,CAJO;;AAMzB;AACA,mBAAS,KAPgB;;AASzB;AACA;AACA,+BAAqB,EAXI;;AAazB;AACA,0BAAgB,IAdS;;AAgBzB;AACA,oBAAU,0DAjBe;AAkBzB,sBAAY,yDAlBa;AAmBzB,4BAAkB;AAnBO,SAAd,EAoBV,kBAAkB,KAAK,EAAL,CAAQ,OAA1B,CApBU,EAoB0B,OApB1B,CAAb;;AAsBA,aAAK,mBAAL,GAA2B,KAAK,mBAAL,CAAyB,KAAzB,CAA+B,GAA/B,CAA3B;;AAEA;AACA,YAAI,KAAK,OAAT,EAAkB;AAChB,eAAK,GAAL,GAAW,CAAX;AACA,eAAK,IAAL,GAAY,CAAZ;AACD;;AAED;AACA,YAAI,OAAO,KAAK,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,eAAK,IAAL,GAAY,WAAW,KAAK,IAAhB,EAAsB,EAAtB,CAAZ;AACD;;AAED,aAAK,SAAL,GAAiB,OAAO,KAAK,SAAZ,KAA0B,WAA1B,GACf,KAAK,IADU,GACH,KAAK,SADnB;;AAGA,aAAK,MAAL,GAAc,OAAO,KAAK,MAAZ,KAAuB,WAAvB,GACZ,KAAK,IAAL,GAAY,EADA,GACK,KAAK,MADxB;;AAGA;AACA,aAAK,GAAL,GAAW,WAAW,KAAK,GAAhB,EAAqB,EAArB,CAAX;AACA,aAAK,GAAL,GAAW,WAAW,KAAK,GAAhB,EAAqB,EAArB,CAAX;AACA,aAAK,IAAL,GAAY,WAAW,KAAK,IAAhB,EAAsB,EAAtB,CAAZ;;AAEA,eAAO,IAAP;AACD;;AAED;;;;;;AA9PS;AAAA;AAAA,qCAmQM,MAnQN,EAmQc;AACrB,YAAM,OAAO,IAAb;AACA,YAAI,KAAK,CAAC,CAAV;AACA,eAAO,OAAO,MAAP,CAAc,UAAC,QAAD,EAAW,OAAX,EAAuB;AAC1C;AACA,iBAAU,QAAV,gGACoD,EADpD,wBAEM,KAAK,OAAL,CAAa,UAFnB;AAID,SANM,EAMJ,EANI,CAAP;AAOD;;AAED;;;;;;;AA/QS;AAAA;AAAA,8CAqRe,MArRf,EAqRuB;AAC9B,YAAM,UAAU,EAAhB;AACA,aAAK,IAAI,KAAK,CAAd,EAAiB,MAAM,OAAO,OAAP,CAAe,MAAf,GAAwB,CAA/C,EAAkD,IAAlD,EAAwD;AACtD,kBAAQ,IAAR,CAAa;AACX,mBAAO,OAAO,OAAP,CAAe,EAAf,EAAmB,KADf;AAEX,mBAAO,OAAO,OAAP,CAAe,EAAf,EAAmB;AAFf,WAAb;AAID;;AAED,eAAO,OAAP;AACD;;AAED;;;;AAjSS;AAAA;AAAA,iCAoSE,SApSF,EAoSa;AACpB,YAAI,KAAK,OAAL,CAAa,OAAb,KAAyB,QAA7B,EAAuC;AACrC,iBAAO,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,UAAU,gBAAV,CAA2B,QAA3B,CAA3B,CAAP;AACD;;AAED,eAAO,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,UAAU,gBAAV,CAA2B,OAA3B,CAA3B,CAAP;AACD;;AAED;;;;;;;AA5SS;AAAA;AAAA,mCAkTI,KAlTJ,EAkTW;AAAA;;AAClB,YAAM,OAAO,IAAb;AACA,YAAM,WAAW,EAAjB;AACA,cAAM,SAAN,CAAgB,OAAhB,CAAwB,IAAxB,CAA6B,MAAM,gBAAN,CAAuB,sBAAvB,CAA7B,EAA6E,UAAC,EAAD,EAAK,EAAL,EAAY;AACvF,aAAG,cAAH,GAAoB,MAAK,MAAL,CAAY,EAAZ,CAApB;;AAEA,cAAI,GAAG,SAAH,CAAa,QAAb,CAAsB,2BAAtB,CAAJ,EAAwD;AACtD,eAAG,KAAH,GAAW,EAAX;AACD,WAFD,MAEO;AACL,eAAG,KAAH,GAAW,GAAG,aAAH,CAAiB,4BAAjB,CAAX;AACD;AACD,mBAAS,IAAT,CAAc,EAAd;AACD,SATD;AAUA,eAAO,QAAP;AACD;;AAED;;;;;;AAlUS;AAAA;AAAA,oCAuUK;AACZ,YAAI,KAAK,OAAL,CAAa,OAAb,KAAyB,QAA7B,EAAuC;AACrC,eAAK,OAAL,GAAe,KAAK,uBAAL,CAA6B,KAAK,MAAL,CAAY,CAAZ,CAA7B,CAAf;AACA,eAAK,OAAL,CAAa,GAAb,GAAmB,KAAK,MAAL,CAAY,CAAZ,EAAe,OAAf,CAAuB,MAAvB,GAAgC,CAAnD;AACD;AACF;;AAED;;;;;;AA9US;AAAA;AAAA,kCAmVG,IAnVH,EAmVS,EAnVT,EAmVa,KAnVb,EAmVoB,SAnVpB,EAmV+B;AACtC,YAAM,WAAW,SAAS,aAAT,CAAuB,MAAvB,CAAjB;AACA,iBAAS,SAAT,GAAqB,SAArB;AACA,iBAAS,IAAT,GAAgB,IAAhB;AACA,iBAAS,EAAT,GAAc,EAAd;;AAEA,aAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACA,cAAM,WAAN,CAAkB,QAAlB;AACD;;AAED;;;;;;;AA7VS;AAAA;AAAA,sCAmWO,KAnWP,EAmWc;AACrB;AACA,aAAK,WAAL,CACE,IADF,EAEE,KAAK,QAAL,CAAc,CAAd,CAFF,EAGE,KAHF,EAIE,oDAJF;;AAMA;AACA;AACA,YAAI,KAAK,QAAL,CAAc,MAAd,IAAwB,CAA5B,EAA+B;AAC7B,eAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,QAAL,CAAc,MAAd,GAAuB,CAA3C,EAA8C,GAA9C,EAAmD;AACjD,iBAAK,WAAL,CACE,KAAK,QAAL,CAAc,CAAd,CADF,EAEE,KAAK,QAAL,CAAc,IAAI,CAAlB,CAFF,EAGE,KAHF,oDAIkD,CAJlD;AAKD;AACF;;AAED;AACA,aAAK,WAAL,CACE,KAAK,QAAL,CAAc,KAAK,QAAL,CAAc,MAAd,GAAuB,CAArC,CADF,EAEE,IAFF,EAGE,KAHF,EAIE,kDAJF;AAKD;;AAED;;;;;;;AA/XS;AAAA;AAAA,2CAqYY,KArYZ,EAqYmB;AAAA;;AAC1B;AACA,YAAM,QAAQ,SAAS,aAAT,CAAuB,KAAvB,CAAd;AACA,cAAM,SAAN,GAAkB,6BAAlB;AACA,cAAM,WAAN,CAAkB,KAAlB;;AAEA,aAAK,WAAL,CAAiB,OAAjB,CAAyB,UAAC,IAAD,EAAO,EAAP,EAAc;AACrC,cAAM,OAAO,SAAS,aAAT,CAAuB,MAAvB,CAAb;AACA,cAAI,cAAJ;AACA,eAAK,SAAL,GAAiB,4BAAjB;AACA,gBAAM,WAAN,CAAkB,IAAlB;;AAEA,cAAI,OAAK,OAAL,CAAa,OAAb,KAAyB,QAA7B,EAAuC;AACrC,oBAAQ,OAAK,OAAL,CAAa,KAAK,CAAL,CAAb,EAAsB,KAA9B;AACD,WAFD,MAEO;AACL,oBAAQ,KAAK,CAAL,CAAR;AACD;;AAED,eAAK,SAAL,GAAiB,OAAK,OAAL,CAAa,gBAAb,CAA8B,OAA9B,CAAsC,WAAtC,EAAmD,KAAnD,CAAjB;AACA,eAAK,KAAL,CAAW,IAAX,GAAqB,KAAK,CAAL,CAArB;AACD,SAdD;AAeD;;AAED;;;;;;;;;AA5ZS;AAAA;AAAA,0CAoaW;AAClB,YAAM,YAAY,KAAK,GAAL,CAAS,KAAK,OAAL,CAAa,GAAb,GAAmB,KAAK,OAAL,CAAa,GAAzC,CAAlB;AACA,YAAM,QAAQ,YAAY,KAAK,OAAL,CAAa,IAAvC;AACA,YAAM,QAAQ,EAAd;;AAEA,aAAK,IAAI,KAAK,CAAd,EAAiB,MAAM,KAAvB,EAA8B,IAA9B,EAAoC;AAClC;AACA,cAAM,UAAU,qBAAqB,KAAK,KAAK,OAAL,CAAa,IAAvC,EAA6C,CAA7C,CAAhB;AACA;AACA,gBAAM,IAAN,CAAW,CAAC,KAAK,OAAL,CAAa,GAAb,GAAmB,OAApB,EACT,qBAAsB,UAAU,SAAX,GAAwB,GAA7C,EAAkD,CAAlD,CADS,CAAX;AAED;;AAED,eAAO,KAAP;AACD;;AAED;;;;;;AApbS;AAAA;AAAA,kCAybG;AACV,eAAO,KAAK,OAAL,CAAa,IAAb,KAAsB,CAA7B;AACD;;AAED;;;;;;;;;;AA7bS;AAAA;AAAA,oCAscK,OAtcL,EAscc,OAtcd,EAscuB;AAC9B,YAAM,QAAQ,KAAK,cAAL,CAAoB,OAApB,CAAd;AACA,aAAK,cAAL,CAAoB,OAApB,EAA6B,OAA7B;AACA,aAAK,kBAAL,CAAwB,OAAxB,EAAiC,KAAjC;AACA,aAAK,4BAAL;AACD;;AAED;;;;;;;AA7cS;AAAA;AAAA,qCAmdM,OAndN,EAmde,OAndf,EAmdwB;AAC/B;AACA;AACA;;AAEA,gBAAQ,KAAR,CAAc,IAAd,GAAwB,OAAxB;AACD;;AAED;;;;;;;;AA3dS;AAAA;AAAA,yCAkeU,OAleV,EAkemB,KAlenB,EAke0B;AACjC,YAAI,cAAJ;;AAEA,YAAI,KAAK,OAAL,CAAa,OAAb,KAAyB,QAA7B,EAAuC;AACrC,kBAAQ,KAAK,OAAL,CAAa,KAAb,EAAoB,KAA5B;AACD,SAFD,MAEO;AACL,kBAAQ,KAAR;AACD;;AAED,gBAAQ,KAAR,CAAc,SAAd,GAA0B,KAA1B;AACD;;AAED;;;;;;AA9eS;AAAA;AAAA,uCAmfQ;AACf;AACA,aAAK,KAAL,GAAa,SAAS,aAAT,CAAuB,KAAvB,CAAb;AACA,aAAK,KAAL,CAAW,SAAX,GAAuB,oBAAvB;AACA,aAAK,SAAL,CAAe,WAAf,CAA2B,KAAK,KAAhC;;AAEA;AACA,aAAK,MAAL,GAAc,KAAK,UAAL,CAAgB,KAAK,EAArB,CAAd;;AAEA,YAAI,KAAK,OAAL,CAAa,OAAjB,EAA0B;AACxB,eAAK,WAAL;AACD;;AAGD,aAAK,KAAL,CAAW,SAAX,GAAuB,KAAK,OAAL,CAAa,QAAb,CAAsB,OAAtB,CAA8B,cAA9B,EACrB,KAAK,cAAL,CAAoB,KAAK,MAAzB,CADqB,CAAvB;AAEA,aAAK,QAAL,GAAgB,KAAK,YAAL,CAAkB,KAAK,KAAvB,CAAhB;;AAEA,aAAK,eAAL,CAAqB,KAAK,KAA1B;;AAEA,YAAI,KAAK,SAAL,EAAJ,EAAsB;AACpB,eAAK,WAAL,GAAmB,KAAK,iBAAL,EAAnB;;AAEA,cAAI,KAAK,OAAL,CAAa,mBAAb,CAAiC,OAAjC,CAAyC,gBAAzC,IAA6D,CAAC,CAAlE,EAAqE;AACnE,iBAAK,oBAAL,CAA0B,KAAK,KAA/B;AACD;AACF;;AAED;AACA,aAAK,SAAL,CAAe,WAAf,CAA2B,KAAK,KAAhC;AACD;;AAED;;;;;;AAnhBS;AAAA;AAAA,mCAwhBI;AAAA;;AACX,aAAK,SAAL,CAAe,gBAAf,CAAgC,WAAhC,EAA6C;AAAA,iBAAO,OAAK,WAAL,CAAiB,GAAjB,CAAP;AAAA,SAA7C;AACA,aAAK,SAAL,CAAe,gBAAf,CAAgC,YAAhC,EAA8C;AAAA,iBAAO,OAAK,WAAL,CAAiB,GAAjB,CAAP;AAAA,SAA9C;AACA,aAAK,SAAL,CAAe,gBAAf,CAAgC,WAAhC,EAA6C;AAAA,iBAAO,OAAK,oBAAL,CAA0B,GAA1B,CAAP;AAAA,SAA7C;AACA,aAAK,SAAL,CAAe,gBAAf,CAAgC,YAAhC,EAA8C;AAAA,iBAAO,OAAK,qBAAL,CAA2B,GAA3B,CAAP;AAAA,SAA9C;AACA,iBAAS,IAAT,CAAc,gBAAd,CAA+B,SAA/B,EAA0C;AAAA,iBAAO,OAAK,SAAL,CAAe,GAAf,CAAP;AAAA,SAA1C;AACA,iBAAS,IAAT,CAAc,gBAAd,CAA+B,UAA/B,EAA2C;AAAA,iBAAO,OAAK,SAAL,CAAe,GAAf,CAAP;AAAA,SAA3C;AACA,iBAAS,IAAT,CAAc,gBAAd,CAA+B,aAA/B,EAA8C;AAAA,iBAAO,OAAK,SAAL,CAAe,GAAf,CAAP;AAAA,SAA9C;AACA,iBAAS,IAAT,CAAc,gBAAd,CAA+B,WAA/B,EAA4C;AAAA,iBAAO,OAAK,eAAL,CAAqB,GAArB,CAAP;AAAA,SAA5C;AACA,iBAAS,IAAT,CAAc,gBAAd,CAA+B,WAA/B,EAA4C;AAAA,iBAAO,OAAK,eAAL,CAAqB,GAArB,CAAP;AAAA,SAA5C;AACA,aAAK,EAAL,CAAQ,gBAAR,CAAyB,cAAzB,EAAyC;AAAA,iBAAO,OAAK,oBAAL,EAAP;AAAA,SAAzC;;AAEA,aAAK,QAAL,CAAc,OAAd,CAAsB,UAAC,MAAD,EAAY;AAChC,iBAAO,gBAAP,CAAwB,SAAxB,EAAmC;AAAA,mBAAO,OAAK,gBAAL,CAAsB,GAAtB,CAAP;AAAA,WAAnC;;AAEA;AACA;AACA;AACA,iBAAO,WAAP,GAAqB;AAAA,mBAAQ,KAAR;AAAA,WAArB;AACD,SAPD;AAQD;;AAED;;;;;;;AA9iBS;AAAA;AAAA,wCAojBS,GApjBT,EAojBc;AACrB,eAAO,KAAK,QAAL,CAAc,IAAd,CAAmB,UAAC,OAAD,EAAa;AACrC,iBAAO,cAAc,OAAd,EAAuB,IAAI,MAA3B,CAAP;AACD,SAFM,CAAP;AAGD;;AAGD;;;;;;;AA3jBS;AAAA;AAAA,kCAikBG,GAjkBH,EAikBQ;AACf;AACA;AACA,YAAM,eAAe,KAAK,iBAAL,CAAuB,GAAvB,CAArB;AACA,YAAI,UAAU,CAAC,CAAf;AACA,YAAI,YAAJ,EAAkB;AAChB,oBAAU,KAAK,QAAL,CAAc,OAAd,CAAsB,YAAtB,CAAV;AACD;;AAED,YAAI,CAAC,YAAL,EAAmB;AACjB,cAAM,SAAS,QAAQ,IAAI,MAAZ,EAAoB,qBAApB,CAAf;AACA,cAAI,UAAU,KAAK,gBAAnB,EAAqC;AACnC,iBAAK,QAAL,CAAc,KAAK,gBAAnB,EAAqC,WAAW,GAAX,IAAkB,UAAU,KAAK,KAAf,EAAsB,IAA7E;AACD;AACD;AACD;;AAED,aAAK,QAAL,GAAgB;AACd,qBAAW,OADG;AAEd,mBAAS,YAFK;AAGd,qBAAW,aAAa,UAHV;AAId,kBAAQ,WAAW,GAAX;AAJM,SAAhB;;AAOA,aAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,CAAgC,GAAhC,CAAoC,6BAApC;AACD;;AAED;;;;;;AA5lBS;AAAA;AAAA,gCAimBC,GAjmBD,EAimBM;AACb,YAAI,KAAK,QAAT,EAAmB;AACjB,eAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,CAAgC,MAAhC,CAAuC,6BAAvC;AACA,eAAK,QAAL,CAAc,OAAd,CAAsB,cAAtB,CAAqC,aAArC,CAAmD,SAAS,UAAT,CAAnD;AACD;;AAED,aAAK,QAAL,GAAgB,KAAhB;AACD;;AAED;;;;;;;AA1mBS;AAAA;AAAA,sCAgnBO,GAhnBP,EAgnBY;AACnB,YAAI,KAAK,QAAL,IAAiB,KAAK,QAAL,CAAc,SAAd,GAA0B,CAAC,CAAhD,EAAmD;AACjD,cAAM,YAAY,WAAW,GAAX,IAAkB,UAAU,KAAK,KAAf,EAAsB,IAA1D;AACA,cAAM,UAAU,KAAK,gBAAL,CAAsB,KAAK,WAAL,CAAiB,SAAjB,CAAtB,CAAhB;;AAEA,eAAK,iBAAL,CAAuB,KAAK,QAAL,CAAc,OAArC,EAA8C,OAA9C;AACD;AACF;;AAED;;;;;;;AAznBS;AAAA;AAAA,2CA+nBY,GA/nBZ,EA+nBiB;AACxB,YAAM,iBAAiB,KAAK,qBAAL,CAA2B,WAAW,GAAX,CAA3B,CAAvB;AACA,YAAI,mBAAmB,KAAK,gBAA5B,EAA8C;AAC5C,cAAI,KAAK,gBAAT,EAA2B;AACzB,iBAAK,gBAAL,CAAsB,SAAtB,CAAgC,MAAhC,CAAuC,8BAAvC;AACD;;AAED,yBAAe,SAAf,CAAyB,GAAzB,CAA6B,8BAA7B;AACA,eAAK,gBAAL,GAAwB,cAAxB;AACD;AACF;;AAED;;;;;;;AA3oBS;AAAA;AAAA,4CAipBa,GAjpBb,EAipBkB;AACzB,YAAI,KAAK,gBAAT,EAA2B;AACzB,eAAK,gBAAL,CAAsB,SAAtB,CAAgC,MAAhC,CAAuC,8BAAvC;AACA,eAAK,gBAAL,GAAwB,IAAxB;AACD;AACF;;AAED;;;;;;;AAxpBS;AAAA;AAAA,4CA8pBa,EA9pBb,EA8pBiB;AACxB,YAAI,MAAM,KAAK,KAAL,CAAW,WAArB;AACA,YAAI,iBAAiB,KAAK,QAAL,CAAc,CAAd,CAArB;;AAEA,aAAK,QAAL,CAAc,OAAd,CAAsB,mBAAW;AAC/B,cAAM,WAAW,KAAK,GAAL,CAAS,KAAK,UAAU,OAAV,EAAmB,IAAjC,CAAjB;AACA,cAAI,WAAW,GAAf,EAAoB;AAClB,kBAAM,QAAN;AACA,6BAAiB,OAAjB;AACD;AACF,SAND;AAOA,eAAO,cAAP;AACD;;AAED;;;;;;;;;AA5qBS;AAAA;AAAA,+BAorBA,OAprBA,EAorBS,KAprBT,EAorBgB;AACvB,gBAAQ,KAAK,cAAL,CAAoB,KAApB,CAAR;AACA,YAAM,UAAU,KAAK,cAAL,CAAoB,KAApB,CAAhB;;AAEA,YAAI,KAAK,OAAL,CAAa,OAAb,KAAyB,QAA7B,EAAuC;AACrC,kBAAQ,cAAR,CAAuB,OAAvB,CAA+B,aAA/B,GAA+C,KAA/C;AACD,SAFD,MAEO;AACL,cAAM,YAAY,KAAK,oBAAL,CAA0B,OAA1B,EAAmC,KAAnC,CAAlB;AACA,cAAI,KAAK,OAAL,CAAa,cAAb,KAAgC,WAApC,EAAiD;AAC/C,gBAAI,QAAQ,UAAU,GAAlB,IAAyB,QAAQ,UAAU,GAA/C,EAAoD;AAClD;AACD;AACF,WAJD,MAIO,IAAI,KAAK,OAAL,CAAa,cAAb,KAAgC,WAApC,EAAiD;AACtD,gBAAI,SAAS,UAAU,GAAnB,IAA0B,SAAS,UAAU,GAAjD,EAAsD;AACpD;AACD;AACF;;AAED,kBAAQ,cAAR,CAAuB,KAAvB,GAA+B,KAA/B;AACD;;AAED,gBAAQ,cAAR,CAAuB,aAAvB,CAAqC,SAAS,OAAT,CAArC;AACA,aAAK,aAAL,CAAmB,OAAnB,EAA4B,OAA5B;AACD;;AAED;;;;;;;AA7sBS;AAAA;AAAA,2CAmtBY,OAntBZ,EAmtBqB;AAC5B,YAAM,eAAe,KAAK,QAAL,CAAc,OAAd,CAAsB,OAAtB,CAArB;AACA,YAAM,MAAM;AACV,eAAK,KAAK,OAAL,CAAa,GAAb,GAAmB,KAAK,OAAL,CAAa,IAD3B;AAEV,eAAK,KAAK,OAAL,CAAa,GAAb,GAAmB,KAAK,OAAL,CAAa;AAF3B,SAAZ;;AAKA,YAAI,eAAe,CAAnB,EAAsB;AACpB,cAAI,GAAJ,GAAU,WAAW,KAAK,QAAL,CAAc,eAAe,CAA7B,EAAgC,cAAhC,CAA+C,KAA1D,EAAiE,EAAjE,CAAV;AACD;;AAED,YAAI,eAAe,KAAK,QAAL,CAAc,MAAd,GAAuB,CAA1C,EAA6C;AAC3C,cAAI,GAAJ,GAAU,WAAW,KAAK,QAAL,CAAc,eAAe,CAA7B,EAAgC,cAAhC,CAA+C,KAA1D,EAAiE,EAAjE,CAAV;AACD;;AAED,eAAO,GAAP;AACD;;AAED;;;;;;;AAruBS;AAAA;AAAA,wCA2uBS,OA3uBT,EA2uBkB,OA3uBlB,EA2uB2B;AAClC,YAAM,QAAQ,KAAK,cAAL,CAAoB,OAApB,CAAd;AACA,aAAK,QAAL,CAAc,OAAd,EAAuB,KAAvB;AACD;;AAED;;;;;;AAhvBS;AAAA;AAAA,uCAqvBQ,GArvBR,EAqvBa;AACpB,gBAAQ,IAAI,OAAZ;AACE,eAAK,EAAL;AAAS;AACP,iBAAK,QAAL,CAAc,IAAI,MAAlB;AACA,gBAAI,cAAJ;AACA;AACF,eAAK,EAAL;AAAS;AACP,iBAAK,SAAL,CAAe,IAAI,MAAnB;AACA,gBAAI,cAAJ;AACA;AACF,eAAK,EAAL;AAAS;AACP,iBAAK,WAAL,CAAiB,IAAI,MAArB;AACA,gBAAI,cAAJ;AACA;AACF,eAAK,EAAL;AAAS;AACP,iBAAK,YAAL,CAAkB,IAAI,MAAtB;AACA,gBAAI,cAAJ;AACA;AACF;AAjBF;AAmBD;AAzwBQ;AAAA;AAAA,6BA2wBF,OA3wBE,EA2wBO,MA3wBP,EA2wBe;AACtB,aAAK,QAAL,CAAc,OAAd,EAAuB,WAAW,QAAQ,cAAR,CAAuB,KAAlC,EAAyC,EAAzC,IAA+C,MAAtE;AACA,gBAAQ,cAAR,CAAuB,aAAvB,CAAqC,SAAS,UAAT,CAArC;AACD;AA9wBQ;AAAA;AAAA,kCAgxBG,OAhxBH,EAgxBY;AACnB,aAAK,MAAL,CAAY,OAAZ,EAAqB,KAAK,OAAL,CAAa,SAAlC;AACD;AAlxBQ;AAAA;AAAA,mCAoxBI,OApxBJ,EAoxBa;AACpB,aAAK,MAAL,CAAY,OAAZ,EAAqB,CAAC,KAAK,OAAL,CAAa,SAAnC;AACD;AAtxBQ;AAAA;AAAA,+BAwxBA,OAxxBA,EAwxBS;AAChB,aAAK,MAAL,CAAY,OAAZ,EAAqB,KAAK,OAAL,CAAa,MAAlC;AACD;AA1xBQ;AAAA;AAAA,gCA4xBC,OA5xBD,EA4xBU;AACjB,aAAK,MAAL,CAAY,OAAZ,EAAqB,CAAC,KAAK,OAAL,CAAa,MAAnC;AACD;AA9xBQ;AAAA;AAAA,+BAgyBA,OAhyBA,EAgyBS,EAhyBT,EAgyBa;AACpB,YAAM,UAAU,KAAK,gBAAL,CAAsB,KAAK,WAAL,CAAiB,EAAjB,CAAtB,CAAhB;AACA,aAAK,iBAAL,CAAuB,OAAvB,EAAgC,OAAhC;AACA,gBAAQ,cAAR,CAAuB,aAAvB,CAAqC,SAAS,UAAT,CAArC;AACD;;AAED;;;;;;AAtyBS;AAAA;AAAA,6CA2yBc;AAAA;;AACrB,YAAI,KAAK,OAAL,CAAa,OAAb,KAAyB,QAA7B,EAAuC;AACrC,cAAM,KAAK,KAAK,MAAL,CAAY,CAAZ,EAAe,OAAf,CAAuB,aAAlC;AACA,cAAM,UAAU,KAAK,cAAL,CAAoB,EAApB,CAAhB;AACA,eAAK,aAAL,CAAmB,KAAK,QAAL,CAAc,CAAd,CAAnB,EAAqC,OAArC;AACD,SAJD,MAIO;AAAA;AACL,gBAAM,aAAN;AACA,iBAAK,QAAL,CAAc,OAAd,CAAsB,UAAC,EAAD,EAAQ;AAC5B,kBAAM,QAAQ,WAAW,GAAG,cAAH,CAAkB,KAA7B,EAAoC,EAApC,CAAd;AACA,kBAAM,UAAU,KAAK,cAAL,CAAoB,KAApB,CAAhB;AACA,mBAAK,aAAL,CAAmB,EAAnB,EAAuB,OAAvB;AACD,aAJD;AAFK;AAON;AACF;;AAED;;;;;;AA1zBS;AAAA;AAAA,qDA+zBsB;AAC7B,aAAK,SAAL,CAAe,OAAf,CAAuB,UAAC,QAAD,EAAc;AACnC,cAAM,UAAU,SAAS,IAAT,GAAgB,WAAW,SAAS,IAAT,CAAc,KAAd,CAAoB,IAA/B,EAAqC,EAArC,CAAhB,GAA2D,CAA3E;AACA,cAAM,QAAQ,SAAS,EAAT,GAAc,WAAW,SAAS,EAAT,CAAY,KAAZ,CAAkB,IAA7B,EAAmC,EAAnC,CAAd,GAAuD,GAArE;;AAEA,cAAM,OAAO,KAAK,GAAL,CAAS,KAAT,EAAgB,OAAhB,CAAb;AACA,cAAM,QAAQ,KAAK,GAAL,CAAS,QAAQ,OAAjB,CAAd;;AAEA,mBAAS,KAAT,CAAe,IAAf,GAAyB,IAAzB;AACA,mBAAS,KAAT,CAAe,KAAf,GAA0B,KAA1B;AACD,SATD;AAUD;;AAED;;;;;;;AA50BS;AAAA;AAAA,qCAk1BM,GAl1BN,EAk1BW;AAClB,YAAM,QAAQ,KAAK,OAAL,CAAa,GAAb,GAAmB,KAAK,OAAL,CAAa,GAA9C;AACA,eAAQ,MAAM,KAAP,IAAiB,MAAM,KAAK,OAAL,CAAa,GAApC,CAAP;AACD;;AAED;;;;;;;AAv1BS;AAAA;AAAA,kCA61BG,EA71BH,EA61BO;AACd,YAAM,OAAO,KAAK,KAAL,CAAW,WAAxB;AACA,eAAQ,KAAK,IAAN,GAAc,GAArB;AACD;;AAED;;;;;;;AAl2BS;AAAA;AAAA,sCAw2BO,OAx2BP,EAw2BgB;AACvB,YAAM,QAAQ,KAAK,OAAL,CAAa,GAAb,GAAmB,KAAK,OAAL,CAAa,GAA9C;AACA;AACA,YAAM,WAAY,WAAW,MAAM,KAAjB,CAAlB;AACA,eAAO,QAAP;AACD;;AAED;;;;;;;AA/2BS;AAAA;AAAA,qCAq3BM,OAr3BN,EAq3Be;AACtB;AACA,YAAM,WAAW,KAAK,eAAL,CAAqB,OAArB,IAAgC,KAAK,OAAL,CAAa,GAA9D;AACA,YAAM,UAAU,MAAM,QAAN,EAAgB,KAAK,OAAL,CAAa,IAA7B,CAAhB;;AAEA,eAAO,OAAP;AACD;;AAED;;;;;;AA73BS;AAAA;AAAA,uCAk4BQ,OAl4BR,EAk4BiB;AACxB;AACA,kBAAU,KAAK,GAAL,CAAS,CAAT,EAAY,OAAZ,CAAV;AACA,kBAAU,KAAK,GAAL,CAAS,GAAT,EAAc,OAAd,CAAV;;AAEA;AACA,eAAO,KAAK,cAAL,CAAoB,KAAK,cAAL,CAAoB,OAApB,CAApB,CAAP;AACD;;AAED;;;;;;AA34BS;AAAA;AAAA,qCAg5BM,KAh5BN,EAg5Ba;AACpB,gBAAQ,KAAK,GAAL,CAAS,KAAK,OAAL,CAAa,GAAtB,EAA2B,KAA3B,CAAR;AACA,gBAAQ,KAAK,GAAL,CAAS,KAAK,OAAL,CAAa,GAAtB,EAA2B,KAA3B,CAAR;AACA,gBAAQ,qBAAqB,KAArB,EAA4B,KAAK,OAAL,CAAa,gBAAzC,CAAR;AACA,eAAO,KAAP;AACD;AAr5BQ;;AAAA;AAAA;;AAy5BX;;;;;;;;AAMA,MAAM,OAAO,SAAP,IAAO,CAAC,GAAD,EAAS;AACpB;AACA,QAAI,eAAe,QAAnB,EAA6B;AAC3B,YAAM,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,GAA3B,CAAN;AACD;;AAED;AACA,QAAI,EAAE,eAAe,KAAjB,CAAJ,EAA6B;AAC3B,YAAM,CAAC,GAAD,CAAN;AACD;;AAED,QAAI,OAAJ,CAAY,UAAC,EAAD,EAAQ;AAClB,aAAO,IAAI,WAAJ,CAAgB,EAAhB,CAAP;AACD,KAFD;AAGD,GAdD;;AAgBA;;;AAGA,SAAO,WAAP,GAAqB,WAArB;AACA,SAAO,WAAP,GAAqB;AACnB;AADmB,GAArB;AAGD,CAt7BD,EAs7BG,MAt7BH","file":"multihandle.js","sourcesContent":["((window) => {\r\n  /**\r\n   * Rounds number to closest step.\r\n   *\r\n   * @param    {Float} value\r\n   * @param    {Float} step\r\n   * @return   {Float}\r\n   */\r\n  function round(value, step) {\r\n    step || (step = 1.0);\r\n    const inv = 1.0 / step;\r\n    return Math.round(value * inv) / inv;\r\n  }\r\n\r\n  /**\r\n   * Trims down the unnecessary decimals\r\n   *\r\n   * @param    {Number} value\r\n   * @param    {Integer} places   Count of the decimal places\r\n   * @return   {Number}           Converted number\r\n   */\r\n  function roundToDecimalPlaces(value, places) {\r\n    const div = Math.pow(10, places);\r\n    return Math.round(value * div) / div;\r\n  }\r\n\r\n  /**\r\n   * Safari can't do Object.assign with a DOMStringMap, so we help him out\r\n   *\r\n   * @param    {DOMStringMap} map\r\n   * @return   {Object}\r\n   */\r\n  function domStringMapToObj(map) {\r\n    const obj = {};\r\n    Object.keys(map).forEach((key) => {\r\n      obj[key] = map[key];\r\n    });\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * Utility method that returns the normalized clintX property of an event\r\n   *\r\n   * Because touch events !== mouse events\r\n   *\r\n   * @param {Event} evt\r\n   * @return {Float}\r\n   */\r\n  function getClientX(evt) {\r\n    if (typeof evt.clientX !== 'undefined') {\r\n      return evt.clientX;\r\n    }\r\n\r\n    if (evt.touches[0]) {\r\n      return evt.touches[0].clientX;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Vanilla version of $.offset\r\n   *\r\n   * @param      {DOMNode}  el\r\n   * @return     {Object}  left and top coordinates of object\r\n   */\r\n  function getOffset(el) {\r\n    const rect = el.getBoundingClientRect();\r\n\r\n    return {\r\n      top: rect.top + document.body.scrollTop,\r\n      left: rect.left + document.body.scrollLeft\r\n    };\r\n  }\r\n\r\n\r\n  /**\r\n   * Utility function to create events\r\n   *\r\n   * @param  {String} eventType\r\n   * @return {Event}\r\n   */\r\n  function newEvent(eventType, options) {\r\n    const evt = document.createEvent('HTMLEvents');\r\n    if (typeof Event === 'function') {\r\n      options = options || {\r\n        view: window,\r\n        bubbles: true,\r\n        cancelable: true\r\n      };\r\n      return new Event(eventType, options);\r\n    }\r\n\r\n    evt.initEvent(eventType, true, true);\r\n    return evt;\r\n  }\r\n\r\n  /**\r\n   * Get nearest parent element matching selector\r\n   *\r\n   * http://stackoverflow.com/a/16430350\r\n   *\r\n   * @param {DOMNode} el Reference to child element\r\n   * @param {String} selector CSS query to match an ancestor to\r\n   */\r\n\r\n  function closest(el, selector) {\r\n    const matchesSelector = el.matches || el.webkitMatchesSelector ||\r\n      el.mozMatchesSelector || el.msMatchesSelector;\r\n\r\n    while (el) {\r\n      if (matchesSelector.call(el, selector)) {\r\n        break;\r\n      }\r\n      el = el.parentElement;\r\n    }\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * \"parent\" node is a parent of (or is the same as) \"child\" node?\r\n   *\r\n   * @param {DOMNode} parent  parent element\r\n   * @param {DOMNode} child   child element\r\n   * @param {bool}            contains, equals: true, otherwise: false\r\n   */\r\n  function isAscendantOf(parent, child) {\r\n    let current = child;\r\n\r\n    while (current) {\r\n      if (current === parent) {\r\n        break;\r\n      }\r\n      current = current.parentNode;\r\n    }\r\n    return current === parent;\r\n  }\r\n\r\n  class MultiHandle {\r\n    /**\r\n     * Creates the main component\r\n     *\r\n     * You can set the options explicitly through the options array, or\r\n     * you can use data-* attributes as well.\r\n     *\r\n     * @param  {DOMNode}   el       Reference to the DOM element\r\n     * @param  {Object}    options\r\n     * @return {undefined}\r\n     */\r\n    constructor(el, options = {}) {\r\n      this.el = el;\r\n\r\n      // removing the \"loading\" state - show component\r\n      // you can hide the component until it loads if you want, or create a\r\n      // loader animation - it's up to you\r\n      this.el.className = el.className.replace(/multihandle--loading/g, '');\r\n\r\n      this.options = this.parseOptions(options);\r\n\r\n      // for non-linear, or value/label datasets\r\n      this.dataset = null;\r\n\r\n      // are we dragging one of the handlers?\r\n      // very important object - we're gonna store the currently dragging element,\r\n      // the starting coordinates, etc, for properly visualized dragging\r\n      this.dragging = false;\r\n\r\n      // the component will be generated in the `container` property\r\n      this.container = this.el.querySelector('.multihandle__component');\r\n      if (!this.container) {\r\n        this.container = this.el;\r\n      }\r\n\r\n      // reference to the original input/select elements\r\n      this.inputs = [];\r\n\r\n      // reference to their handler representations\r\n      this.handlers = [];\r\n\r\n      // the selected interval between two handlers\r\n      this.intervals = [];\r\n\r\n      // creating the component\r\n      this.buildComponent();\r\n\r\n      // syncing the states of the handlers to the inputs\r\n      this.syncHandlersToInputs();\r\n\r\n      // syncing the length of the intervals to the positions of the handlers\r\n      this.syncIntervalsBetweenHandlers();\r\n\r\n      // binding events to the component\r\n      this.bindEvents();\r\n    }\r\n\r\n    /**\r\n     * Creates the this.options, based on the default and the specified values\r\n     *\r\n     * Plus normalizes some flags/variables\r\n     *\r\n     * @param   {Object} options\r\n     * @return  {Object} The merged, final option object\r\n     */\r\n    parseOptions(options) {\r\n      // default options, merged to the data attributes, then to the given options\r\n      const opts = Object.assign({\r\n        min: 0,\r\n        max: 100,\r\n        step: 0.5,\r\n        decimalsAccuracy: 2,\r\n\r\n        // selector to the dataset element in the domtree\r\n        dataset: false,\r\n\r\n        // which graphical elements will be enabled? We only have\r\n        // `snappingpoints` right now\r\n        generateExtraMarkup: '',\r\n\r\n        // null, exclusive, inclusive\r\n        handlerOverlap: null,\r\n\r\n        // decorate them as you like\r\n        tplTrack: '<span class=\"multihandle__track-deco\"></span>${handlers}',\r\n        tplHandler: '<span class=\"multihandle__handle-label\">${label}</span>',\r\n        tplSnappingpoint: '${label}'\r\n      }, domStringMapToObj(this.el.dataset), options);\r\n\r\n      opts.generateExtraMarkup = opts.generateExtraMarkup.split(',');\r\n\r\n      // re-building the values, if dataset is given\r\n      if (opts.dataset) {\r\n        opts.min = 0;\r\n        opts.step = 1;\r\n      }\r\n\r\n      // from the data attibutes it always comes as a string\r\n      if (typeof opts.step === 'string') {\r\n        opts.step = parseFloat(opts.step, 10);\r\n      }\r\n\r\n      opts.incLittle = typeof opts.incLittle === 'undefined' ?\r\n        opts.step : opts.incLittle;\r\n\r\n      opts.incBig = typeof opts.incBig === 'undefined' ?\r\n        opts.step * 10 : opts.incBig;\r\n\r\n      // casting values to float\r\n      opts.min = parseFloat(opts.min, 10);\r\n      opts.max = parseFloat(opts.max, 10);\r\n      opts.step = parseFloat(opts.step, 10);\r\n\r\n      return opts;\r\n    }\r\n\r\n    /**\r\n     * Creates the DOM string of the handlers so we can inject it in the HTML.\r\n     *\r\n     * @return {string} The handlers\r\n     */\r\n    createHandlers(inputs) {\r\n      const self = this;\r\n      let ix = -1;\r\n      return inputs.reduce((previous, current) => {\r\n        ix++;\r\n        return `${previous}<a href=\"javascript:void(0)\"\r\n          class=\"multihandle__handle multihandle__handle--${ix}\">\r\n            ${self.options.tplHandler}\r\n          </a>`;\r\n      }, '');\r\n    }\r\n\r\n    /**\r\n     * Creates the dataset from the given select tag\r\n     *\r\n     * @param  {DOMNode}  select\r\n     * @return {Array}\r\n     */\r\n    createDatasetFromSelect(select) {\r\n      const dataset = [];\r\n      for (let ix = 0; ix <= select.options.length - 1; ix++) {\r\n        dataset.push({\r\n          value: select.options[ix].value,\r\n          label: select.options[ix].text\r\n        });\r\n      }\r\n\r\n      return dataset;\r\n    }\r\n\r\n    /**\r\n     * Finds the native input elements in the component, and set references to them.\r\n     */\r\n    findInputs(container) {\r\n      if (this.options.dataset === 'select') {\r\n        return Array.prototype.slice.call(container.querySelectorAll('select'));\r\n      }\r\n\r\n      return Array.prototype.slice.call(container.querySelectorAll('input'));\r\n    }\r\n\r\n    /**\r\n     * Finding the handlers in the container node.\r\n     *\r\n     * @param  {DOMNode} container\r\n     * @return {undefined}\r\n     */\r\n    findHandlers(track) {\r\n      const self = this;\r\n      const handlers = [];\r\n      Array.prototype.forEach.call(track.querySelectorAll('.multihandle__handle'), (el, ix) => {\r\n        el.inputReference = this.inputs[ix];\r\n\r\n        if (el.classList.contains('multihandle__handle-label')) {\r\n          el.label = el;\r\n        } else {\r\n          el.label = el.querySelector('.multihandle__handle-label');\r\n        }\r\n        handlers.push(el);\r\n      });\r\n      return handlers;\r\n    }\r\n\r\n    /**\r\n     * Creates the dataset if needed\r\n     *\r\n     * @return {undefined}\r\n     */\r\n    initDataset() {\r\n      if (this.options.dataset === 'select') {\r\n        this.dataset = this.createDatasetFromSelect(this.inputs[0]);\r\n        this.options.max = this.inputs[0].options.length - 1;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Creates an interval between two handler (or a handler and an edge).\r\n     *\r\n     * @param      {<type>}  track   The track\r\n     */\r\n    addInterval(from, to, track, className) {\r\n      const interval = document.createElement('span');\r\n      interval.className = className;\r\n      interval.from = from;\r\n      interval.to = to;\r\n\r\n      this.intervals.push(interval);\r\n      track.appendChild(interval);\r\n    }\r\n\r\n    /**\r\n     * Creating intervals between the handlers\r\n     *\r\n     * @param  {DOMNode} track       The intervals will be created in this container\r\n     * @return {undefined}\r\n     */\r\n    createIntervals(track) {\r\n      // interval between the first handler and the track's left side\r\n      this.addInterval(\r\n        null,\r\n        this.handlers[0],\r\n        track,\r\n        'multihandle__interval multihandle__interval--start');\r\n\r\n      // let's create them between the current handler, and the next one\r\n      // are we in multihandle mode?\r\n      if (this.handlers.length >= 2) {\r\n        for (let i = 0; i < this.handlers.length - 1; i++) {\r\n          this.addInterval(\r\n            this.handlers[i],\r\n            this.handlers[i + 1],\r\n            track,\r\n            `multihandle__interval multihandle__interval--${i}`);\r\n        }\r\n      }\r\n\r\n      // interval between the last handler and the track's right side\r\n      this.addInterval(\r\n        this.handlers[this.handlers.length - 1],\r\n        null,\r\n        track,\r\n        'multihandle__interval multihandle__interval--end');\r\n    }\r\n\r\n    /**\r\n     * Creates visible, styleable snapping points\r\n     *\r\n     * @param  {DOMNode} track    The snapping points will be created in this container\r\n     * @return {undefined}\r\n     */\r\n    createSnappingPoints(track) {\r\n      // container div for easier styling (css queries)\r\n      const snaps = document.createElement('div');\r\n      snaps.className = 'multihandle__snappingpoints';\r\n      track.appendChild(snaps);\r\n\r\n      this.snappingMap.forEach((data, ix) => {\r\n        const snap = document.createElement('span');\r\n        let label;\r\n        snap.className = 'multihandle__snappingpoint';\r\n        snaps.appendChild(snap);\r\n\r\n        if (this.options.dataset === 'select') {\r\n          label = this.dataset[data[0]].label;\r\n        } else {\r\n          label = data[0];\r\n        }\r\n\r\n        snap.innerHTML = this.options.tplSnappingpoint.replace(/\\${label}/, label);\r\n        snap.style.left = `${data[1]}%`;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * A snapping map, so we'll know where to snap the handlers, and which value will be there\r\n     *\r\n     * Format of the elements in the snapping array:\r\n     * [0: value, 1: percent]\r\n     *\r\n     * @return {Array}\r\n     */\r\n    createSnappingMap() {\r\n      const valLength = Math.abs(this.options.max - this.options.min);\r\n      const steps = valLength / this.options.step;\r\n      const snaps = [];\r\n\r\n      for (let ix = 0; ix <= steps; ix++) {\r\n        // avoiding floating point math \"bugs\"\r\n        const currVal = roundToDecimalPlaces(ix * this.options.step, 6);\r\n        // first number: value, second: percent (for display purposes)\r\n        snaps.push([this.options.min + currVal,\r\n          roundToDecimalPlaces((currVal / valLength) * 100, 2)]);\r\n      }\r\n\r\n      return snaps;\r\n    }\r\n\r\n    /**\r\n     * Is snapping enabled or not?\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    isItSnaps() {\r\n      return this.options.step !== 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the handler's position to the given percent value.\r\n     *\r\n     * It validates the percentage first, and also updates the label, and the\r\n     * interval between multiple handlers (if there's any).\r\n     *\r\n     * @param {DOMNode} handler\r\n     * @param {Float} percent\r\n     */\r\n    setHandlerPos(handler, percent) {\r\n      const value = this.percentToValue(percent);\r\n      this.setHandlerLeft(handler, percent);\r\n      this.updateHandlerLabel(handler, value);\r\n      this.syncIntervalsBetweenHandlers();\r\n    }\r\n\r\n    /**\r\n     * Sets a handler's left position without any checking.\r\n     *\r\n     * @param  {DOMNOde}  handler\r\n     * @param  {Float}    percent\r\n     */\r\n    setHandlerLeft(handler, percent) {\r\n      // would be better, but it won't work properly - ther percentage in this\r\n      // case is relative to the element's size instead of the parent's size\r\n      // handler.style.transform = `translate3d(${percent}%, 0, 0)`;\r\n\r\n      handler.style.left = `${percent}%`;\r\n    }\r\n\r\n    /**\r\n     * Update a handler's label by a value (could be a real value, or a dataset index)\r\n     *\r\n     * @param  {DOMNode} handler\r\n     * @param  {Float} value\r\n     * @return {undefined}\r\n     */\r\n    updateHandlerLabel(handler, value) {\r\n      let label;\r\n\r\n      if (this.options.dataset === 'select') {\r\n        label = this.dataset[value].label;\r\n      } else {\r\n        label = value;\r\n      }\r\n\r\n      handler.label.innerHTML = label;\r\n    }\r\n\r\n    /**\r\n     * Creating the track and the handlers\r\n     *\r\n     * @return undefined\r\n     */\r\n    buildComponent() {\r\n      // creating the track element\r\n      this.track = document.createElement('div');\r\n      this.track.className = 'multihandle__track';\r\n      this.container.appendChild(this.track);\r\n\r\n      // find all the inputs elements\r\n      this.inputs = this.findInputs(this.el);\r\n\r\n      if (this.options.dataset) {\r\n        this.initDataset();\r\n      }\r\n\r\n\r\n      this.track.innerHTML = this.options.tplTrack.replace(/\\${handlers}/,\r\n        this.createHandlers(this.inputs));\r\n      this.handlers = this.findHandlers(this.track);\r\n\r\n      this.createIntervals(this.track);\r\n\r\n      if (this.isItSnaps()) {\r\n        this.snappingMap = this.createSnappingMap();\r\n\r\n        if (this.options.generateExtraMarkup.indexOf('snappingpoints') > -1) {\r\n          this.createSnappingPoints(this.track);\r\n        }\r\n      }\r\n\r\n      // putting the whole component in the container\r\n      this.container.appendChild(this.track);\r\n    }\r\n\r\n    /**\r\n     * Adding eventlisteners\r\n     *\r\n     * @return {undefined}\r\n     */\r\n    bindEvents() {\r\n      this.container.addEventListener('mousedown', evt => this.onMouseDown(evt));\r\n      this.container.addEventListener('touchstart', evt => this.onMouseDown(evt));\r\n      this.container.addEventListener('mousemove', evt => this.onContainerMouseMove(evt));\r\n      this.container.addEventListener('mouseleave', evt => this.onContainerMouseLeave(evt));\r\n      document.body.addEventListener('mouseup', evt => this.onMouseUp(evt));\r\n      document.body.addEventListener('touchend', evt => this.onMouseUp(evt));\r\n      document.body.addEventListener('touchcancel', evt => this.onMouseUp(evt));\r\n      document.body.addEventListener('mousemove', evt => this.onBodyMouseMove(evt));\r\n      document.body.addEventListener('touchmove', evt => this.onBodyMouseMove(evt));\r\n      this.el.addEventListener('inputUpdated', evt => this.syncHandlersToInputs());\r\n\r\n      this.handlers.forEach((handle) => {\r\n        handle.addEventListener('keydown', evt => this.onHandlerKeyDown(evt));\r\n\r\n        // stopping the browser's d&d feature on the anchor.\r\n        // doesn't work with the addEventListener way, that's why we need this\r\n        // direct assignment here\r\n        handle.ondragstart = evt => (false);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Finds out if a click happened on one of the handlers\r\n     *\r\n     * @param  {Event}  evt  The event\r\n     * @return {DOMNode}   found handler\r\n     */\r\n    getClickedHandler(evt) {\r\n      return this.handlers.find((handler) => {\r\n        return isAscendantOf(handler, evt.target);\r\n      });\r\n    }\r\n\r\n\r\n    /**\r\n     * This could be a start for dragging one of the handlers\r\n     *\r\n     * @param  {Event} evt\r\n     * @return {undefined}\r\n     */\r\n    onMouseDown(evt) {\r\n      // if the click was triggered somewhere in our component,\r\n      // not on one of the handlers...\r\n      const foundHandler = this.getClickedHandler(evt);\r\n      let foundIx = -1;\r\n      if (foundHandler) {\r\n        foundIx = this.handlers.indexOf(foundHandler);\r\n      }\r\n\r\n      if (!foundHandler) {\r\n        const parent = closest(evt.target, '.multihandle__track');\r\n        if (parent && this.currentlyHovered) {\r\n          this.jumpToPx(this.currentlyHovered, getClientX(evt) - getOffset(this.track).left);\r\n        }\r\n        return;\r\n      }\r\n\r\n      this.dragging = {\r\n        handlerIx: foundIx,\r\n        handler: foundHandler,\r\n        startLeft: foundHandler.offsetLeft,\r\n        startX: getClientX(evt)\r\n      };\r\n\r\n      this.dragging.handler.classList.add('multihandle__handle--active');\r\n    }\r\n\r\n    /**\r\n     * Dragging stopped\r\n     *\r\n     * @return {undefined}\r\n     */\r\n    onMouseUp(evt) {\r\n      if (this.dragging) {\r\n        this.dragging.handler.classList.remove('multihandle__handle--active');\r\n        this.dragging.handler.inputReference.dispatchEvent(newEvent('inputend'));\r\n      }\r\n\r\n      this.dragging = false;\r\n    }\r\n\r\n    /**\r\n     * Moving one of the handlers, if it's in dragging state\r\n     *\r\n     * @param  {Event} evt\r\n     * @return {undefined}\r\n     */\r\n    onBodyMouseMove(evt) {\r\n      if (this.dragging && this.dragging.handlerIx > -1) {\r\n        const newLeftPx = getClientX(evt) - getOffset(this.track).left;\r\n        const percent = this.normalizePercent(this.pxToPercent(newLeftPx));\r\n\r\n        this.setValueByPercent(this.dragging.handler, percent);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * We show which handle will snap to the mouse's position when a user clicks\r\n     *\r\n     * @param  {Event} evt\r\n     * @return {undefined}\r\n     */\r\n    onContainerMouseMove(evt) {\r\n      const closestHandler = this.getClosestHandlerToPx(getClientX(evt));\r\n      if (closestHandler !== this.currentlyHovered) {\r\n        if (this.currentlyHovered) {\r\n          this.currentlyHovered.classList.remove('multihandle__handle--hovered');\r\n        }\r\n\r\n        closestHandler.classList.add('multihandle__handle--hovered');\r\n        this.currentlyHovered = closestHandler;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * We remove the hover classes\r\n     *\r\n     * @param  {Event} evt\r\n     * @return {undefined}\r\n     */\r\n    onContainerMouseLeave(evt) {\r\n      if (this.currentlyHovered) {\r\n        this.currentlyHovered.classList.remove('multihandle__handle--hovered');\r\n        this.currentlyHovered = null;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Which handler is the closest one to this x coordinate?\r\n     *\r\n     * @param  {Float} px\r\n     * @return {DOMNode} handler\r\n     */\r\n    getClosestHandlerToPx(px) {\r\n      let min = this.track.clientWidth;\r\n      let currentHandler = this.handlers[0];\r\n\r\n      this.handlers.forEach(handler => {\r\n        const distance = Math.abs(px - getOffset(handler).left);\r\n        if (distance < min) {\r\n          min = distance;\r\n          currentHandler = handler;\r\n        }\r\n      });\r\n      return currentHandler;\r\n    }\r\n\r\n    /**\r\n     * Sets a handler's value directly\r\n     *\r\n     * @param {DOMNode} handler\r\n     * @param {Float} value\r\n     * @return\r\n     *\r\n     */\r\n    setValue(handler, value) {\r\n      value = this.normalizeValue(value);\r\n      const percent = this.valueToPercent(value);\r\n\r\n      if (this.options.dataset === 'select') {\r\n        handler.inputReference.options.selectedIndex = value;\r\n      } else {\r\n        const posValues = this.getPossibleValuesFor(handler, value);\r\n        if (this.options.handlerOverlap === 'exclusive') {\r\n          if (value < posValues.min || value > posValues.max) {\r\n            return;\r\n          }\r\n        } else if (this.options.handlerOverlap === 'inclusive') {\r\n          if (value <= posValues.min || value >= posValues.max) {\r\n            return;\r\n          }\r\n        }\r\n\r\n        handler.inputReference.value = value;\r\n      }\r\n\r\n      handler.inputReference.dispatchEvent(newEvent('input'));\r\n      this.setHandlerPos(handler, percent);\r\n    }\r\n\r\n    /**\r\n     * Returns the value of possible min and max value for a given handler.\r\n     *\r\n     * @param  {DOMNode} handler\r\n     * @return {Object}   { min, max }\r\n     */\r\n    getPossibleValuesFor(handler) {\r\n      const handlerIndex = this.handlers.indexOf(handler);\r\n      const ret = {\r\n        min: this.options.min - this.options.step,\r\n        max: this.options.max + this.options.step\r\n      };\r\n\r\n      if (handlerIndex > 0) {\r\n        ret.min = parseFloat(this.handlers[handlerIndex - 1].inputReference.value, 10);\r\n      }\r\n\r\n      if (handlerIndex < this.handlers.length - 1) {\r\n        ret.max = parseFloat(this.handlers[handlerIndex + 1].inputReference.value, 10);\r\n      }\r\n\r\n      return ret;\r\n    }\r\n\r\n    /**\r\n     * Sets a handler's value as percent plus updates the related input\r\n     *\r\n     * @param {DOMNode} handler\r\n     * @param {Float} percent\r\n     */\r\n    setValueByPercent(handler, percent) {\r\n      const value = this.percentToValue(percent);\r\n      this.setValue(handler, value);\r\n    }\r\n\r\n    /**\r\n     * Handling the keystrokes\r\n     *\r\n     * @param {Event} evt\r\n     */\r\n    onHandlerKeyDown(evt) {\r\n      switch (evt.keyCode) {\r\n        case 38: // up\r\n          this.incByBig(evt.target);\r\n          evt.preventDefault();\r\n          break;\r\n        case 40: // down\r\n          this.descByBig(evt.target);\r\n          evt.preventDefault();\r\n          break;\r\n        case 39: // right\r\n          this.incByLittle(evt.target);\r\n          evt.preventDefault();\r\n          break;\r\n        case 37: // left\r\n          this.descByLittle(evt.target);\r\n          evt.preventDefault();\r\n          break;\r\n        default:\r\n      }\r\n    }\r\n\r\n    incDec(handler, offset) {\r\n      this.setValue(handler, parseFloat(handler.inputReference.value, 10) + offset);\r\n      handler.inputReference.dispatchEvent(newEvent('inputend'));\r\n    }\r\n\r\n    incByLittle(handler) {\r\n      this.incDec(handler, this.options.incLittle);\r\n    }\r\n\r\n    descByLittle(handler) {\r\n      this.incDec(handler, -this.options.incLittle);\r\n    }\r\n\r\n    incByBig(handler) {\r\n      this.incDec(handler, this.options.incBig);\r\n    }\r\n\r\n    descByBig(handler) {\r\n      this.incDec(handler, -this.options.incBig);\r\n    }\r\n\r\n    jumpToPx(handler, px) {\r\n      const percent = this.normalizePercent(this.pxToPercent(px));\r\n      this.setValueByPercent(handler, percent);\r\n      handler.inputReference.dispatchEvent(newEvent('inputend'));\r\n    }\r\n\r\n    /**\r\n     * Update the handlers to reflect the inputs' state\r\n     *\r\n     * @return {undefined}\r\n     */\r\n    syncHandlersToInputs() {\r\n      if (this.options.dataset === 'select') {\r\n        const ix = this.inputs[0].options.selectedIndex;\r\n        const percent = this.valueToPercent(ix);\r\n        this.setHandlerPos(this.handlers[0], percent);\r\n      } else {\r\n        const self = this;\r\n        self.handlers.forEach((el) => {\r\n          const value = parseFloat(el.inputReference.value, 10);\r\n          const percent = self.valueToPercent(value);\r\n          self.setHandlerPos(el, percent);\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Updating the intervals between the handlers for proper sizing\r\n     *\r\n     * @return {undefined}\r\n     */\r\n    syncIntervalsBetweenHandlers() {\r\n      this.intervals.forEach((interval) => {\r\n        const fromPos = interval.from ? parseFloat(interval.from.style.left, 10) : 0;\r\n        const toPos = interval.to ? parseFloat(interval.to.style.left, 10) : 100;\r\n\r\n        const left = Math.min(toPos, fromPos);\r\n        const width = Math.abs(toPos - fromPos);\r\n\r\n        interval.style.left = `${left}%`;\r\n        interval.style.width = `${width}%`;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Transforms an input value with a min/max threshold to a percent value\r\n     *\r\n     * @param  {Float} val\r\n     * @return {Float} percentage\r\n     */\r\n    valueToPercent(val) {\r\n      const scale = this.options.max - this.options.min;\r\n      return (100 / scale) * (val - this.options.min);\r\n    }\r\n\r\n    /**\r\n     * Comes handy when the user drags the element, and all we have is the left coordinate\r\n     *\r\n     * @param  {Float} px\r\n     * @return {Float} percent\r\n     */\r\n    pxToPercent(px) {\r\n      const full = this.track.clientWidth;\r\n      return (px / full) * 100;\r\n    }\r\n\r\n    /**\r\n     * Gives back the percent's numeric representation on the min-max scale\r\n     *\r\n     * @param  {[type]} percent [description]\r\n     * @return {[type]}         [description]\r\n     */\r\n    percentToOffset(percent) {\r\n      const scale = this.options.max - this.options.min;\r\n      // before rounding to options.step\r\n      const rawValue = (percent / (100 / scale));\r\n      return rawValue;\r\n    }\r\n\r\n    /**\r\n     * Gives back the value, based on the current handler position\r\n     *\r\n     * @param  {Float} percent\r\n     * @return {Float} value\r\n     */\r\n    percentToValue(percent) {\r\n      // before rounding to options.step\r\n      const rawValue = this.percentToOffset(percent) + this.options.min;\r\n      const rounded = round(rawValue, this.options.step);\r\n\r\n      return rounded;\r\n    }\r\n\r\n    /**\r\n     * Converts percent to value, while keeping mind the min/max/step values\r\n     *\r\n     * @param {Float} percent\r\n     */\r\n    normalizePercent(percent) {\r\n      // limit the percentage between 0 and 100\r\n      percent = Math.max(0, percent);\r\n      percent = Math.min(100, percent);\r\n\r\n      // then convert it to a valid value, then back to percent\r\n      return this.valueToPercent(this.percentToValue(percent));\r\n    }\r\n\r\n    /**\r\n     * Squeezes the given value between the min and max limits\r\n     *\r\n     * @param {Float} value\r\n     */\r\n    normalizeValue(value) {\r\n      value = Math.max(this.options.min, value);\r\n      value = Math.min(this.options.max, value);\r\n      value = roundToDecimalPlaces(value, this.options.decimalsAccuracy);\r\n      return value;\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Create multihandler components from the given array of DOMNodes\r\n   *\r\n   * @param  {Array}     els   Node list of DOM elements\r\n   * @return {undefined}\r\n   */\r\n  const init = (els) => {\r\n    // querySelectorAll -> Array\r\n    if (els instanceof NodeList) {\r\n      els = Array.prototype.slice.call(els);\r\n    }\r\n\r\n    // single element -> [element]  (so we can forEach it)\r\n    if (!(els instanceof Array)) {\r\n      els = [els];\r\n    }\r\n\r\n    els.forEach((el) => {\r\n      return new MultiHandle(el);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Exported API in the window namespace\r\n   */\r\n  window.Multihandle = MultiHandle;\r\n  window.multihandle = {\r\n    init\r\n  };\r\n})(window);\r\n"]}