{"version":3,"sources":["../src/multihandle.js"],"names":["window","round","value","step","inv","Math","roundToDecimalPlaces","places","div","pow","getClientX","evt","clientX","touches","undefined","newEvent","type","options","document","createEvent","Event","view","bubbles","cancelable","initEvent","MultiHandle","el","className","replace","Object","assign","min","max","decimalsAccuracy","tpl","track","handler","dataset","parseFloat","incLittle","incBig","dragging","container","querySelector","handlers","Array","prototype","slice","call","querySelectorAll","handlerEls","lines","buildComponent","syncHandlersToInputs","syncLinesBetweenHandlers","bindEvents","self","reduce","previous","current","forEach","ix","inputReference","push","length","i","line","createElement","lineFrom","lineTo","appendChild","percent","percentToValue","style","left","innerHTML","createHandlers","findHandlers","createLines","addEventListener","onMouseDown","body","onMouseUp","onMouseMove","handle","onHandlerKeyDown","found","indexOf","target","handlerIx","startLeft","offsetLeft","startX","classList","add","remove","newLeftPx","normalizePercent","pixelToPercent","setPercentValue","normalizeValue","valueToPercent","dispatchEvent","setHandlerPos","setHandlerValue","keyCode","incByBig","preventDefault","descByBig","incByLittle","descByLittle","input","handler1","handler2","width","abs","val","scale","px","full","scrollWidth","rawValue","rounded","init","els","multihandle"],"mappings":"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","file":"multihandle.js","sourcesContent":["((window) => {\n  /**\n   * Round number to step\n   * @param  float value\n   * @param  float step\n   * @return float\n   */\n  function round(value, step) {\n    step || (step = 1.0);\n    const inv = 1.0 / step;\n    return Math.round(value * inv) / inv;\n  }\n\n  function roundToDecimalPlaces(value, places) {\n    const div = Math.pow(10, places);\n    return Math.round(value * div) / div;\n  }\n\n  /**\n   * utility method that returns the normalized clintX property of an event\n   *\n   * @param Event evt\n   * @return Float\n   */\n  function getClientX(evt) {\n    if (typeof evt.clientX !== 'undefined') {\n      return evt.clientX;\n    }\n\n    if (evt.touches[0]) {\n      return evt.touches[0].clientX;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * utility function to create events\n   *\n   * @param String type\n   * @return Event\n   */\n  function newEvent(type, options) {\n    const evt = document.createEvent('HTMLEvents');\n    if (typeof Event === 'function') {\n      options = options || {\n        view: window,\n        bubbles: true,\n        cancelable: true\n      };\n      return new Event(type, options);\n    }\n    evt.initEvent(type, true, true);\n    return evt;\n  }\n\n  class MultiHandle {\n    /**\n     * Creates the component\n     *\n     * You can set the options explicitly through the options array, or\n     * you can use data-* attributes as well.\n     *\n     * @param  DOMNode el       Reference of the DOM element\n     * @param  Object options\n     * @return undefined\n     */\n    constructor(el, options = {}) {\n      this.el = el;\n\n      // removing the \"loading\" state - show component\n      this.el.className = el.className.replace(/multihandle--loading/g, '');\n\n      // default options\n      this.options = Object.assign({\n        min: 0,\n        max: 100,\n        step: 0.5,\n        decimalsAccuracy: 2,\n        tpl: {\n          track: '${handlers}',\n          handler: '${value}'\n        }\n      }, this.el.dataset, options);\n\n      if (typeof this.options.step === 'string') {\n        this.options.step = parseFloat(this.options.step, 10);\n      }\n\n      this.options.incLittle = typeof this.options.incLittle === 'undefined' ?\n        this.options.step : this.options.incLittle;\n\n      this.options.incBig = typeof this.options.incBig === 'undefined' ?\n        this.options.step * 10 : this.options.incBig;\n\n      // normalize values\n      this.options.min = parseFloat(this.options.min, 10);\n      this.options.max = parseFloat(this.options.max, 10);\n      this.options.step = parseFloat(this.options.step, 10);\n\n      // are we dragging something?\n      this.dragging = false;\n\n      // the component will be generated here\n      this.container = this.el.querySelector('.multihandle__component');\n      if (!this.container) {\n        this.container = this.el;\n      }\n\n      // reference to the original handlers, converted to an array\n      this.handlers = Array.prototype.slice.call(this.el.querySelectorAll('input'));\n      this.handlerEls = [];\n      this.lines = [];\n\n      // creating the component\n      this.buildComponent();\n      this.syncHandlersToInputs();\n      this.syncLinesBetweenHandlers();\n\n      // binding events to the component\n      this.bindEvents();\n    }\n\n    /**\n     * Creates the DOM string of the handlers we can inject in the HTML.\n     *\n     * @return string The handlers\n     */\n    createHandlers() {\n      const self = this;\n      return this.handlers.reduce((previous, current) => (\n        `${previous}<a href=\"javascript:void(0)\" class=\"multihandle__handle\">\n          ${self.options.tpl.handler}\n        </a>`), ''\n      );\n    }\n\n    /**\n     * Finding the handlers in the container node.\n     *\n     * @param  DOMNode container\n     * @return undefined\n     */\n    findHandlers(track) {\n      const self = this;\n      track.querySelectorAll('.multihandle__handle').forEach((el, ix) => {\n        el.inputReference = this.handlers[ix];\n        self.handlerEls.push(el);\n      });\n    }\n\n    /**\n     * Creating lines between the handlers\n     *\n     * @return string The lines\n     */\n    createLines(track) {\n      if (this.handlerEls.length < 2) {\n        return;\n      }\n\n      // let's create a between the current handler, and the next one\n      for (let i = 0; i < this.handlerEls.length - 1; i++) {\n        const line = document.createElement('span');\n        line.className = `multihandle__line multihandle__line--${i}`;\n        line.lineFrom = this.handlerEls[i];\n        line.lineTo = this.handlerEls[i + 1];\n\n        this.lines.push(line);\n        track.appendChild(line);\n      }\n    }\n\n    /**\n     * Sets the handler left position to the given percent value\n     *\n     * @param Object handler\n     * @param Float percent\n     */\n    setHandlerPos(handler, percent) {\n      const value = this.percentToValue(percent);\n      handler.style.left = `${percent}%`;\n      handler.innerHTML = this.options.tpl.handler.replace(/\\${value}/, value);\n      this.syncLinesBetweenHandlers();\n    }\n\n    /**\n     * Creating the range track and the handlers\n     *\n     * @return undefined\n     */\n    buildComponent() {\n      // creating the track element\n      const track = document.createElement('div');\n      track.className = 'multihandle__track';\n      this.container.appendChild(track);\n\n      // putting the handlers on the track\n      track.innerHTML = this.options.tpl.track.replace(/\\${handlers}/, this.createHandlers());\n      this.findHandlers(track);\n\n      this.createLines(track);\n\n      // putting the whole component in the container\n      this.container.appendChild(track);\n    }\n\n    /**\n     * Adding eventlisteners\n     *\n     * @return undefined\n     */\n    bindEvents() {\n      this.container.addEventListener('mousedown', evt => this.onMouseDown(evt));\n      this.container.addEventListener('touchstart', evt => this.onMouseDown(evt));\n      document.body.addEventListener('mouseup', evt => this.onMouseUp(evt));\n      document.body.addEventListener('touchend', evt => this.onMouseUp(evt));\n      document.body.addEventListener('touchcancel', evt => this.onMouseUp(evt));\n      document.body.addEventListener('mousemove', evt => this.onMouseMove(evt));\n      document.body.addEventListener('touchmove', evt => this.onMouseMove(evt));\n\n      this.handlerEls.forEach((handle) => {\n        handle.addEventListener('keydown', evt => this.onHandlerKeyDown(evt));\n      });\n    }\n\n    /**\n     * We may start dragging one of the handlers\n     *\n     * @param  Event evt\n     * @return undefined\n     */\n    onMouseDown(evt) {\n      const found = this.handlerEls.indexOf(evt.target);\n      // click triggered on the track, not on one of the handlers\n      if (found < 0) {\n        return;\n      }\n\n      this.dragging = {\n        handlerIx: found,\n        handler: this.handlerEls[found],\n        startLeft: this.handlerEls[found].offsetLeft,\n        startX: getClientX(evt)\n      };\n\n      this.dragging.handler.classList.add('multihandle__handle--active');\n      document.body.classList.add('multihandle-disable-drag');\n    }\n\n    /**\n     * Dragging stopped\n     *\n     * @return undefined\n     */\n    onMouseUp(evt) {\n      if (this.dragging) {\n        this.dragging.handler.classList.remove('multihandle__handle--active');\n      }\n\n      this.dragging = false;\n      document.body.classList.remove('multihandle-disable-drag');\n    }\n\n    /**\n     * Moving one of the handlers, if it's in dragging state\n     *\n     * @param  Event evt\n     * @return undefined\n     */\n    onMouseMove(evt) {\n      if (this.dragging && this.dragging.handlerIx > -1) {\n        const newLeftPx = this.dragging.startLeft - (this.dragging.startX - getClientX(evt));\n        const percent = this.normalizePercent(this.pixelToPercent(newLeftPx));\n\n        this.setPercentValue(this.dragging.handler, percent);\n      }\n    }\n\n    /**\n     * Sets a handler's value\n     *\n     * @param Object handler\n     * @param Float value\n     * @return\n     *\n     */\n    setHandlerValue(handler, value) {\n      value = this.normalizeValue(value);\n      const percent = this.valueToPercent(value);\n      handler.inputReference.value = value;\n      handler.inputReference.dispatchEvent(newEvent('input'));\n      this.setHandlerPos(handler, percent);\n    }\n\n    /**\n     * Sets a handler's value as percent plus updates the related input\n     *\n     * Object handler\n     * Float percent\n     */\n    setPercentValue(handler, percent) {\n      const value = this.percentToValue(percent);\n      this.setHandlerValue(handler, value);\n    }\n\n    onHandlerKeyDown(evt) {\n      switch (evt.keyCode) {\n        case 38: // up\n          this.incByBig(evt.target);\n          evt.preventDefault();\n          break;\n        case 40: // down\n          this.descByBig(evt.target);\n          evt.preventDefault();\n          break;\n        case 39: // right\n          this.incByLittle(evt.target);\n          evt.preventDefault();\n          break;\n        case 37: // left\n          this.descByLittle(evt.target);\n          evt.preventDefault();\n          break;\n        default:\n      }\n    }\n\n    incByLittle(handler) {\n      this.setHandlerValue(\n        handler,\n        parseFloat(handler.inputReference.value, 10) + this.options.incLittle\n      );\n    }\n\n    descByLittle(handler) {\n      this.setHandlerValue(\n        handler,\n        parseFloat(handler.inputReference.value, 10) - this.options.incLittle\n      );\n    }\n\n    incByBig(handler) {\n      this.setHandlerValue(\n        handler,\n        parseFloat(handler.inputReference.value, 10) + this.options.incBig\n      );\n    }\n\n    descByBig(handler) {\n      this.setHandlerValue(\n        handler,\n        parseFloat(handler.inputReference.value, 10) - this.options.incBig\n      );\n    }\n\n    /**\n     * Update the handlers to reflect the inputs' state\n     *\n     * @return undefined\n     */\n    syncHandlersToInputs() {\n      const self = this;\n      self.handlerEls.forEach((el) => {\n        const value = parseFloat(el.inputReference.value, 10);\n        const percent = self.valueToPercent(value);\n        el.style.left = `${percent}%`;\n        el.innerHTML = el.innerHTML.replace(/\\${value}/, value);\n      });\n    }\n\n    /**\n     * Update the values of the input fields\n     *\n     * @return undefined\n     */\n    syncInputsToHandlers() {\n      const self = this;\n\n      this.handlerEls.forEach((handler) => {\n        const input = handler.inputReference;\n        input.value = self.percentToValue(parseFloat(handler.style.left, 10));\n      });\n    }\n\n    /**\n     * Updating the lines between the handlers for proper sizing\n     *\n     * @return undefined\n     */\n    syncLinesBetweenHandlers() {\n      if (this.handlerEls.length < 2) {\n        return;\n      }\n\n      this.lines.forEach((line) => {\n        const handler1 = parseFloat(line.lineTo.style.left, 10);\n        const handler2 = parseFloat(line.lineFrom.style.left, 10);\n        const left = Math.min(handler1, handler2);\n        const width = Math.abs(handler1 - handler2);\n\n        line.style.left = `${left}%`;\n        line.style.width = `${width}%`;\n      });\n    }\n\n    /**\n     * Transforms an input value with a min/max threshold to a percent value\n     *\n     * @param  float val\n     * @return float percentage\n     */\n    valueToPercent(val) {\n      const scale = this.options.max - this.options.min;\n      return (100 / scale) * (val - this.options.min);\n    }\n\n    /**\n     * Comes handy when the user drags the element, and all we have is the left coordinate\n     *\n     * @param  float px\n     * @return float percent\n     */\n    pixelToPercent(px) {\n      const full = this.container.scrollWidth;\n      return (px / full) * 100;\n    }\n\n    /**\n     * Gives back the value based on the current handler position\n     *\n     * @param  float percent\n     * @return float value\n     */\n    percentToValue(percent) {\n      const scale = this.options.max - this.options.min;\n      // before rounding to options.step\n      const rawValue = (percent / (100 / scale)) + this.options.min;\n      const rounded = round(rawValue, this.options.step);\n\n      return rounded;\n    }\n\n    /**\n     * Squeezes the percent value between 0 and 100\n     *\n     * @param Float percent\n     */\n    normalizePercent(percent) {\n      // limit the percentage between 0 and 100\n      percent = Math.max(0, percent);\n      percent = Math.min(100, percent);\n\n      // converts percent to value, keeping mind the min/max value limits\n      // then convert it back to percent\n      return this.valueToPercent(this.percentToValue(percent));\n    }\n\n    /**\n     * Squeezes the value between the min and max limits\n     *\n     * @param Float value\n     */\n    normalizeValue(value) {\n      // limit the percentage between 0 and 100\n      value = Math.max(this.options.min, value);\n      value = Math.min(this.options.max, value);\n      value = roundToDecimalPlaces(value, this.options.decimalsAccuracy);\n      return value;\n    }\n\n  }\n\n  /**\n   * Create multihandler components from the given array of DOMNodes\n   *\n   * @param  Array els    Node list of DOM elements\n   * @return undefined\n   */\n  const init = (els) => {\n    els.forEach((el) => {\n      return new MultiHandle(el);\n    });\n  };\n\n  /**\n   * Exported API in the window namespace\n   */\n  window.multihandle = {\n    init\n  };\n})(window);\n"]}